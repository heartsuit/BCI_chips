function approche_classif_other(class,chan,C,filtering,Fe)


N_start = round(2.15*1024);
N_end = round(2.7*1024);
N_sample = 16;

if filtering
    srate = Fe;
    N = 4;  %Ordre du filtre
    R = 20;    %Ripple du filtre
    W1 = (2*1)/srate;   %Fréquence de coupure basse (1Hz)
    W2 = (2*10)/srate;  %Fréquence de coupure haute (10Hz)
    
    Wp = [W1 W2];
    
    [B,A] = cheby2(N,R,Wp); %Filtre de chebychev
%     [B,A] = cheby2(N,R,W2);
    for i=chan
        for j=1:size(class(1).signal,1)
            class(1).signal(j,:,i) = filter(B,A,class(1).signal(j,:,i));
        end
        for j=1:size(class(2).signal,1)
            class(2).signal(j,:,i) = filter(B,A,class(2).signal(j,:,i));
        end
    end
end

kernelparam.ktype = 1;
kernelparam.kscale = 0.2;
N_tronc = N_start:N_sample:N_end;
%descripteur
nbclasses = size(class,2);

for i=1:nbclasses
    nb_trials = size(class(i).signal,1);
    for j=chan
        for k=1:nb_trials
            class(i).signal_decim(k,:,j) = class(i).signal(k,N_tronc,j);
        end
    end
    class(i).des = [];
    for j=chan
        class(i).des = [class(i).des, class(i).signal_decim(:,:,j)];
    end
end


for i=1:5
    ind_1 = [zeros((i-1)*90,1); ones(90,1); zeros((5-i)*90,1)];
    ind_2 = [zeros((i-1)*30,1); ones(30,1); zeros((5-i)*30,1)];
    test = cat(1,class(1).des(ind_1 == 1,:),class(2).des(ind_2 == 1,:));
    labels_test = [-ones(sum(ind_1 == 1),1);ones(sum(ind_2 == 1),1)];
    app = cat(1,class(1).des(ind_1 ~= 1,:),class(2).des(ind_2 ~= 1,:));
    labels_app = [-ones(sum(ind_1 ~= 1),1);ones(sum(ind_2 ~= 1),1)];
    
    ind_permute = randperm(length(labels_app));
    app = app(ind_permute,:);
    labels_app = labels_app(ind_permute);
    O1 = NaiveBayes.fit(app,labels_app);
    class_estim = O1.predict(test);
    err = sum(labels_test - class_estim ~= 0)/length(labels_test);
    err_c = sum((labels_test(1:90) - class_estim(1:90)) ~= 0)/length(labels_test(1:90));
    err_w = sum((labels_test(91:120) - class_estim(91:120)) ~= 0)/length(labels_test(91:120));
    disp(num2str(i));
    disp(num2str(err));
    disp(num2str(err_c));
    disp(num2str(err_w));
    disp('')
end 

