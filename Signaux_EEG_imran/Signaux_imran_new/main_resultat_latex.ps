%!PS-Adobe-2.0
%%Creator: dvips(k) 5.96dev Copyright 2007 Radical Eye Software
%%Title: main_resultat_latex.dvi
%%CreationDate: Fri Nov 26 16:28:23 2010
%%Pages: 5
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: SFBX1440 SFRM1000 CMR10 CMMI10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o main_resultat_latex.ps
%+ main_resultat_latex.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2010.11.26:1628
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 21 2008-04-18 13:40:08Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.04, 2008/04/15
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ] cvx def } def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
%-----------------------------------------------------------------------------%

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 7 2007-12-29 22:21:13Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 22 2008-04-18 16:03:12Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.01,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: CMMI10
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 101 /e put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D456A09920001A3D2199583EB9B84B4DEE08E3D12939E321
990CD249827D9648574955F61BAAA11263A91B6C3D47A5190165B0C25ABF6D3E
6EC187E4B05182126BB0D0323D943170B795255260F9FD25F2248D04F45DFBFB
DEF7FF8B19BFEF637B210018AE02572B389B3F76282BEB29CC301905D388C721
59616893E774413F48DE0B408BC66DCE3FE17CB9F84D205839D58014D6A88823
D9320AE93AF96D97A02C4D5A2BB2B8C7925C4578003959C46E3CE1A2F0EAC4BF
8B9B325E46435BDE60BC54D72BC8ACB5C0A34413AC87045DC7B84646A324B808
6FD8E34217213E131C3B1510415CE45420688ED9C1D27890EC68BD7C1235FAF9
1DAB3A369DD2FC3BE5CF9655C7B7EDA7361D7E05E5831B6B8E2EEC542A7B38EE
03BE4BAC6079D038ACB3C7C916279764547C2D51976BABA94BA9866D79F13909
95AA39B0F03103A07CBDF441B8C5669F729020AF284B7FF52A29C6255FCAACF1
74109050FBA2602E72593FBCBFC26E726EE4AEF97B7632BC4F5F353B5C67FED2
3EA752A4A57B8F7FEFF1D7341D895F0A3A0BE1D8E3391970457A967EFF84F6D8
47750B1145B8CC5BD96EE7AA99DDC9E06939E383BDA41175233D58AD263EBF19
AFC0E2F840512D321166547B306C592B8A01E1FA2564B9A26DAC14256414E4C8
42616728D918C74D13C349F4186EC7B9708B86467425A6FDB3A396562F7EE4D8
40B43621744CF8A23A6E532649B66C2A0002DD04F8F39618E4F572819DD34837
B5A08E643FDCA1505AF6A1FA3DDFD1FA758013CAED8ACDDBBB334D664DFF5B53
9560176676ABB71BBD0EE56B4CC492C0652750227CEC7977026713493C6D2607
64C7A8A40F1F9A331436C19129F39EBD27237166F5C444212A40F5CB2278B2ED
5CE7C86D788A1BF3E47F36B7FECB85785FF689D0C16E84AB6567B69550A6EDE4
85E94252C51A5E9D785FAF3ADE76B92A95FB6C6D5438AE249468CE24964BCC59
256782175D998A911A6A0A4E95CA21D273271E197C5C8899DE534BE9BF0EB581
83D1748048BF2E8F4E22B56B2FF85C98894805543BAF393B0894A13406132E55
523EE8C3AFB630866250FBF2B8E60B0C60A3295A50AF3EC8135FA3EEAF028CC0
6C4689307172E2A32A3A600289DB03891C9EB83208953854128507587C173E49
E846081CF1E3607563F2ACAE22D03453689A4CEB2143BC4DEABC5484042838B2
2B333411AFBFC6D3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 94 /circumflex put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3C8578EF9A20A0E06E
4F7ADDAF0E7D1E182D115BF1AD931977325AD391E72E2B13CC108E3726C11099
E2000623188AAAC9F3E233EB253BDD8B0A4759A66A113E066238B0086AC1B634
5ABFF90E4B5ED3FA69C22541981B2BFC9710AEF6B50A8BB53431C7B4D380D721
639E005D6B4688EE16BFF48443E7C9E5FB5BC5883E271CB0342893C0BBC0A879
B7220832FB50103F72F8B5D9808681A9805D3845788EAE69B439498953DB1217
A15E1F63DDC23231813219F9E38BEDE4B769F6048ADD7D01F110389F1F63438E
2FBFB55F8305D12B058885FACDCC1E7C422176ED2C42ABB04D20D6BCE8B25450
775AD58DB32BD9CA239335D303ECCF0173CF32F9C1F33C1E2A812F404B3369EA
67C7B95D489D7F44248CBDEE6FE4B3661D0B583CED7D682AA17AED914A3FF1AF
2D7BCE5D6F09E48F9EE746D23642EB6FEDE17AEB376A0160B7A7B2D503730450
E45423EC4CB0B9DD845613FEE48768206B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM1000
%!FontType1-1.0: SFRM1000 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1000, tcrm1000, larm1000, lbrm1000, lcrm1000, rxrm1000.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1000 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-189 -321 1456 937}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6B55C6E47AD7A9A958A6E22E00FDD4D6492D53ADDC90ECD778346C06747
57609FE8907DFFFED75E2CF963A64C7F72488F4A02372BE681E9BBF09A9CE5A9
3894F6358C244FCD46C148F1EB60DE2137E6D3079D6AE03B3724F7D7BBA47BC4
41C27FFFDFF9FB7B7738A8D88C27573A53E244723E07C995948DED2516B6044E
ADED62C496A56BC14483D307884467ADE985655A4712DD06ED00811F9A05BF9F
BF2AC66203817289FFB5BDCD0445293981AF6F55928C132E885ED009DE1B5FB0
C230370EB5156A8B609E466F00F768F0A52ABCFBFCE3514C0FDDE31E601AD508
2666AD26D9DB386B9FEC80AC197C9FE7447928C0C6A2858375F0A1D7AD3BE53C
9A926DDFBAC60D846783AA97CB86F804701BF53F7C4D18B925FD604F60231215
EBDF4FAD73F2D13518E1901C3DA00ACE65647765106EFCA89D1CE17ADBB75815
7BF819C45DA64CEAA10062501C3B0FE0387FD5406CBDB17A69376AFED2632E2A
C400D16CA3657327EBBCF7CAC55A62AC9AB3D07691C97D98ABFA2A4C85DB2345
C8773110004A7812B031AB3F9B3AB9C7D0E5A2317931334466110BC5C95CE00C
E1CD16242B71CCB962978DB5B8FB03BB2FED25589D10F8B3861F73DAEE17BC59
B909B17D2510F640D341330CCF08ADF9E3106B0C8BB0D04D5F939FAE21AFE501
4614CBFE82CAEF30ECC2B6B47B373FAB1A828AA3CDF7B59BF013442EEFE267AA
AF153EE99EBE4743CA764DA09185666446630553F3D278E1953BFF08FE477C68
4661A47656EC28B2039365CA017F4F1B6E9F85525565795336F712BDB47E3F5C
0AD825C8A485CD0B532EABB114A510EB3B4A64060E05FB3D9E4F641EB4A9BB38
C290300AC5B93602CFA9B43B97759B2F6F443D3C5BBD0F3DF094586A746B5C3B
E196C9252A0631EBCDB3BCB608A871E3F0B4BC30296AB02AC1A713025258E573
B71DEB606ADCCEFE9BE4331E22FB32B7A8D02952DAD2A6166AA4E9A929A41440
5614C454EDD954EC25646921887636B74B1B0A47FD325BE917B05C3296E4265F
C97C0B776E8FECA128568AF90469201E64134B6F0F24DB44FB6BB7AE8A602CC5
424CBAC9007EABB568DFECC6F9030C81C1F104A9613DF495B087FF8E144BF590
AD3EA1E18FFB6DA629262F021EC19E447F8E185DF9AA0C328E10F2BFAB2DE0E7
CEE1D3F4679AC9C79D8998455056CC0F680A66AA8830745B651A25B34FA2BC01
7BC0B32976B0C8239ECE72340F8B1D0C319A466A6B5220C1551563AB8B477972
F4C158F34B18ABC3AE6BF12AEF35C9B4E41A808225F84F220D02739254CD764C
0FDDB048F04BFE5A9F1C7512B51149C2D5D9A5CDFB048376D604F3709A271800
1316F0FC5192ED93421A4AF8172ADDEECA4ACA5DDF993AA9BDF35B6B699A9EE0
981B0F6B4F86CFEFB98F81592914514DAA2B9120AD484C5FEE1A0E852C04243C
3D00DA2CDF9DF9EE9A45B9D497A7FB5372277A76DB474A68FC6CDFD92B04760E
9C6C616007B842C1B7669A32669D8AB8418651E3CE35E7C196F254580888C335
B9EBDD13665C8C6695D7AC0601B6895D47D5DDFFA6827B4F3C0A46EBA0946FB6
D123E95543984979F0389CD83F5E642BD80270AF8B352A3D2BBECC716386454D
40FD1176FB2FB54B3E821867FDB0D72E6375527B40912858B90145787CB28205
C6155EAD5D7138A14AB91B0BB03CA0DE37EF1310DA68DE28F394F6ED25EDB014
3C36A801C57C65156F8D83D3FEC999B4B8304CF1506E3A9AF01A16B3A0F8E578
9F7B23398A627A5EBA53AF3DFBFAEDEE6FD11921146CF8A31CB87FE343C0D47A
B26795504553D34BA8D3322B9DF4F9D8196B6AD1948DF18F80DCDDDBE16B3524
49FF43736F2927180AF6671A7B38EE62296357FDDBAE9E2253E207FB2296CB05
04F911A00EF93132CA5805840B2CA6E258D28D8A3ED091CD034AC714A2F19085
9F3DE0E309BDDF20993AFD6D030A79B71C2BA4F821F5D0F49EDC8C5C83D66C21
24FD165C29FFBAEB7119D4C61D4EF00A7EE3605737AB54C71CE464C5A519AF0D
965A0FD871532E6ACF671DF047F8EDBDA26B381BC6FC0971D780D98C1971FB23
2FCBE3C3E3D0BF420106481EEC37407D44468B5939532134EAA3B44D0C2FF4BB
DB2F7C431F14227D57B6D850AFE4BF7E6E9FFA65B508CE06DA6254DE55AA2BFE
B24F4F53594DD56168A34F48A9E044FF36163C83EDDE9629F2CFEE6BE1304D3B
4D3A16C94BD8A25DB8858C122B9DC8F2534E57E8E7F439AC528CD68232C72812
9D8B11249CD0ECCDB1F41DC33D3CEB0DD59EB53C466A9878FEDF22D8A8C9C5F9
AAA69718501BEC251CE187C5D34F4074EBEC25F3E8BE72593FA74470CEEB3AD7
7C07BA80AEFCF23171B21BA6E8C23F8BB74D1B1AC9DB6E607E76EB884A8476F4
FEA72D9A828C6CD39B5C3A1E23C5846B0C9C8DBDE90E8D9119DDCD2601FC8944
C5855E175BAD8D01980777AF9FE9ED826DADA4910E3B067352984B3D075C92AE
49124467CECFE6DA1137E9604C5B96E51BE694581608D23F532B2DDFF86EEE92
7CE5E606116C26010439D005E1F9CEF73345BA7D68C41EC98A2DD0B344BAAC09
5EF9356D9D28F39EE066F96A5D066464EC7498899804A2E71D3F755D4E8BC838
D161E132C41DC6441EFADE8D6CCF0A80C2F4DC2A0AE3F6A96F0EC3E56DE8F073
86FEC6109E3D5254C191C074AFBD42B9699B02C63CCD963654BD2918EA1EF7A0
66821D6CAB6C97C25A57650B1441543B9084B6207B005A8A9AF9F1260D27907A
D24DAAC81D82A00B3EE8B23F9FD5C8CE82D8593685917847E195B7040D2C7949
FE28D3DD0C22575FFC80159929B6F332462328847E728A6F057EA1FD7E43CF8D
0F137FD09BD2E8E945A523BEC12B65E794C70568BE5B23A037DF5960527A26CF
9546D1A66FF7F9274EA5909902A489A36ABC40CE5118EBA2EE69005772590834
16348E7E1F838A5FE8329A028E9372993D239ED7D6C4709F3AA987FF91AF13F4
0F74DC822B9A9CE9EFEE9C9F6587F34CD6ACD7F664D7616EEA1F35C565956924
E3C1B352595EDBBE96CACD8CFDE5B79EFFBF6BA86CC3623DBB34FE3B8A86235F
30D16445122706C90751ACD94575BF8F33877635AD152C63105A477D109FDCF9
A28F677979A15EDD735BBCBDE727F637713649519A90410E181B07587537B268
4391831CC4E37990D2DD090FED34573F7F6F3838A1FF4FEA26D57CE8619EB224
B8C8D13CFA1E09B91614682E0D74320F72764DD340E780784781E849DA85124E
C53B5965CD3BE30560FF2C999ACC476DBD608F22EA30D1DD0EF65C35F457699F
FA6163945A9153BC784C5D97299E671D9EF6A5FD414D0C2C9DD587271A7F44DE
68329857833852C4B0CC02B8EBB1D9A2EA800482A58F634C2FF0999BECE15BA8
4639C5C1AAB5A401305E4C09EAF5BDF3495D20AF3D45228B86E43ED060DBE2C4
0BC1316BC6EEB5C47443174C9B5846B7524F11D5401ED7608BE2015937C13740
C8E2952C3BD0C4D6608A63E6C7CC15E15F57DC9FD9B1F3E105BBE248EDFC1D18
53D0E4BD0CAD5D40E28CA5497860F325D2AC4098BC6C35E6223753B16CDD2559
328544F645C4268CC1FA3EFF9FBA2461E8CBE8A5E2A6649D2CD508B81DDDF1F5
F485CD6B67F7379B8843010C92022EC719BC38CF6C497D0D0E4EF1489083E908
6DAF3C232035CF710DBB63C739E4F675D2E983C0D463B2A69DBBAABFDE2F2368
B6714DC4BB76A68BA319727D60D64FE134A8307D417A873B90023A278D37E84B
DB516C6C2DA485D1C5CB4259365D608F2387D1DE2D78B4C1107695EFDBD0243E
51EA90A16FF697EBB1034AFD58DE55CCF177057130D3F2F0D22E404AB967DD65
9D547D8240DD39B82F034B836C66B8977D1E4E9401960683AC169D2E48C545B3
45B16CF88B597F604B5C34E8EE3671CF6FA989CEB5DBD6AC1A5FF96523CA348C
07D8E4F37657E4A6C4D68E47B39A305FABDE1006E3D3B4E46E8ACD2DA44E3A03
04E0E96D97B8A79BA80FA383485266717118B9AA0CFF0370A27CC284946E38EE
E50243B7485F99FCD046CE3100BC08DC60B408FA2808AEFDE0EE5C3C58A8907E
D4383D08DCA20DA83E153D392D67E486248EF5594AC01A1025A3212CC8A3F602
E7D0B63EEEB6E7AF00CF17B761FDB020040175C45CE0F3BC82DF8363E4743916
312E4F078CC223711C74FC66F7E92EFDCD4130A409334D0F0BD972CC8D7F4D79
AB4F2695B5C8D550CF03E879BDDBB71C13E14EDB793BF0C98D7280CC2FD79AE1
5C2DB33906DDE3119DC51E1C922F1910F980611DB8B7689E5EC508FD4ACBC51C
56EF4C80AB929A12C1C5D7D6FD8EFCF6ED6204B83A20AE54FC8B20BEF1676FED
E0726E092EAC02BA30C537E79CA9B61D2DF202E1B5832C56C501F630BA5062BC
96B328E038F9A90CFD8519CFF9545871248D6689DED9CA26907BB52F9DFD820D
98953DA60DB50C5335911882E64A02890FEDE9EEC43B4C28AE2E120D2784FAA9
A2DDD18CD788341CA51BFA777A8B26505067072D05F93B5BFEC525CDCD5EBDF6
055A56F8E99C2183BD34DD045442EC71DC31CB8BEE4BD251A93220ED47EB9F6B
05098787D96D8A9AEB45A4EFE90E2791FBDBF2F9E5AB5817ED95D253224A97DD
E3613E136EEFD5EDD92A07A991EF5D023BA9B22E0B576F5B789A0F81560ED156
065EFD5E636FBB0AD7B96F644F0D1F174F99A1B8F17CD45FA840D364D24D7E52
6F09EC7573E8CC2FC7C9FCC928B29FCF211D7D75926C6032F887E36190ECB693
56A3076859938288ED9FBE0F93390CA37A332949ECAB747C9D37E4268D2ABD61
D3DDB77238BF3528587AE854B9EF34374773FCD6E45137C2DC605B8604FBA739
DCC06C103508FBA851DE64C9685BECC73A40BAC7B8CAB8609B97E6A333F11611
68565E00038DDA04381B8A89CCFFBFA86407A133C053AC675BD1F1DBD7802F66
3FD46D6C80AB84D96D17E33F8851D9A8C916422AF064230E87A28F8D5A69CFEB
74AA66885ADB605AF5511BEC251CE187C5D34F4074EBEC25F49B174583E203A8
A2CA541E143ACCD729EE4DA7E3D05A213CF4DCC343705FC9CC20664F3A241608
CD9E5C4995B95BDB0AD3FDE96FC8D3D82375A008C3E559D3342D945FD06A5D5B
7D6252F69D5CDDCAB9048F39400EDF16F50801F342421354A508F985795BE88E
AC2E3BEF1290614B8D33D662DAE00DB61E14860BE8D809D7704D97A602BEDD83
5C5F9B5CB51922A4E697FF1DDA05B8B2A0D2ACE41305795931B9E14B4E50647F
37A368EC59525636EFB6322C626523F2300BE61B922F4F30E1052932A7C60126
6ED2B909E6800B2920E4FB4699D84E009259F0DB23AD610F231016B6213E8612
D2E9E418AE44482AD5F18FE2F530BDAD051B660AA3F1F9560DEB817897D5EAE1
009FC8CA5383C6EB8FFF8C7E2F54AA9DCB1ED16B94477FDF68D1EBB8A4EE8353
51703945710FE2D708B7243B4AAE05EC2FCE3A9EC04FFABB71AEB4A52C4CC93E
7643095084632EE1FA74D8AD1BD217F1FC347103FE4A2A55862786E82F47A190
E6BD5B9D548EA4AF2179AF87D099C3CCEA203C09D965323657A3758BAFA69AFE
7BF4F139FB5958D7B86B4C15D3822CF62456CF9E70D8F83F46DBFF5FDAC2A3FD
2C4AAF966BB77F57B4E11773049CD1998D457E89761CC52432C40CC468EA82C6
01010A03EAE7F6BD04DBDD12B26FE7913E39C859BFAC2334F6ADCCFC36C2173D
5B8D8EEB7C03071FDC08F320FD66431AC7D98A422438DFED3FD79DEFE0B30105
3F9CB8CCBF3D9CFF45C284C0C44F637FA2E03562C91747F8D4EBEF116CEACDC1
02DB55A617CC9310491BDB2F61648D8AE9B0B5DA48AAE4250DD63FD79B18C92F
CBDAA85F5222DD5CFA2D4E303E9C29ED568DF576EE7F9745A93A475EBE012056
50016FE4CBF0BF1F91FF781AEAB9C3A7515004CF15320E474D48E58E0D1105BF
F8F5F53B26F661155754FA57CAB556A5A3E8D4C804E944FB8D954CE4EDD91447
900259C34163635AE90E6D52502BD71B368DED6B163A924B2B244B1EB631DEB6
8B5D81F65D476077D8D60C78BE086FC75DE3D8A917B48A25AF50162E428D8025
F37A4E4D1D901E5A444191865A1F87344E2CC529482392426127D61131FA7F37
462C3DC344DD30A36F84F0EE91BB162CD63522E8E2BC4EFC738DD1904B3476E0
B2F1D3D612BE78D90098D9727A062202D9546A33B060B7E57DACD429F7F235E6
5B2D7F07F2496A308467D38E8020C7EC6B15131DAAD9A62E705B6DD2AFB8D8AF
11C11BDAB5E9488531D696EE428BA0D59A2DA44E06558B9F00E1BA7768C1B6C6
EF6FA54DB538A2087B61FD6AA5E36E057F99163B9CFD517908756A336A6AFBC2
FA1823264E5A5B8F93B6C6929BA78287C21194D8601F392AB27FDD13ADBB916D
53A351DFB7AD034F9174B2FB781757737AD67B01200D034FD828594E85532662
19B7F295AE7795EE5AD67F6F113187CC6293315325D4FCA116CFFFFB12FC2E5D
8942BDA17082B8BC2C9703FB81CE0BDFBD5895070514EE94820D08C4509D1FC9
A90A982C0CDB79DF7A5A9C06C26A8E4F44F6CB60131E50759E3C7DFA47A98112
96495278BF516641EF96F1D1BA03D214A8C1B7E422973829FA620B9410E74E06
3392305D64CC0B3C92679831A59C0FF5B0FDD7C27FE438BE5D36359D09FAD3FE
50D102CE5B1E067ED1FE2B0C1719ECE9FE824B0BB25B106572605F1472CA82D5
44398C0478B42E67E8799F33FC9278A3E0FFB6434473B77A07B20C78DF99DCD0
1E26A95B3A3B0B7A023CACED851E91B9C528E0648A67A2B48CDDEECA8BA748A6
3C6E8079226DB84139EAE740FC863AB1B6C5736B1AA80DB606E6FED6B7EF54B8
6BAA23A7418CF3B6439136D6B20B730E36FEB80F752F4C0173B2F0ABF4C6C205
67A26DC69F2A27DFC9D88ACA659959E50336AF06A06E4D4B1E79D449E89D434B
A1CA46CEADF497A2FF82EC36DC545BA4C451972F89A4F601F283C171764ACD56
B6D7349A9061C5D58A8D0664FB9A10EF64D5F6207A4C719FF1040409D8DB610E
0F68F85FB601C8E87755EA87E2C5848F61D2DC3E24E24EAF4C7C6D9D856D980A
D0337278541B2ACC97D99BFAEFDDE281B45B53A97E58D41FF2432A2B90961AA8
404723EAE2BCB0322E64E263E96A16488E0B3753527AC2FDAFF6BE85ADFC6DB6
742E68E0F30D7F4F35D711825CCB45F2AC14C81D91B35FE54950FFE8E242A3BD
1FB35B42C29CA018A8540F2A31ACEC2CAB047819D47DF6EACE21073B06548BB3
673E4C6AF2DFF458129B28EF1184163935D717EBCD4444922364C6958033AE14
2DBB41CF3E4A01EC7D2E68807109F38D6E663FEE630DB0A4DF9DECECECA6F1A5
F28A3BDCC009AA08743426ACC70FCF69E598D0DF6D27C06741F0F205C5853C95
9A4E04DB53DEC9202FCE360AEA8ADB90389BA8282F398BB50251D861E7C22764
752BD89C6FF45C3B301E6A2B3EBC6FBEC3190B1F74B15D4AE40855E052CE101C
0C3F7300424F53CF28B55563D7216605D1D7F3A6F31CF09769221B0F9E9BEE72
06E90ED2D6ED2B86B33A70537EA4AF071B050C5D34BDB26492058AC13F1B1DD5
E631CEDF31511A446EB3BC69DC85C12FA2E90493DF774A0DB0D085EA06FCF0F8
355ABBA226C260F687DAAA15BFEFDBC9937241C4221FED41EEC5177B5BB222D3
D4A3CC1FC21E757C5240A4F249AA5A6B694FCA3B171E6A993613495B868EE2AD
75AE4DAFC3A88E05EE7333B522F9E77496A5F94A608DB874F173C7A995011996
4B11FF103A055F50224551C8791090146427A0E910F67FFDFFD6B7250A3E968E
7F7DA14915258B44B23B61382326B2E1AEB2F32D5A5F7FB57804D7133B883901
4CC67DEE79BD088CFDD7D6F0A9F687B92B1E413DDEC857FD28ED582E646B347E
74744C42B434EAEA2596546D483D807136C40644832623960E4F2EDBF1E507F6
D8E56AAD519C0E6A1E2A759C406FC1A28D9ADEFE78899CE46B900EFE5754C174
52983D4DDF9CF1A646DAF4C1956A83947E38189E0591873D92BA5A04E7C9DF64
D080F19C67837BC14630A58A2C770F6B8BE13F09033F55114FB265E238F5DC6D
EC53316002B48847EAA81E2977977BD32CB6F4DC28F2C85637389846DC924912
DA375D937A647BF8AC4F79C9E4B769C0E1490604A2F2C6DE71FD9EF586EB465A
A18BB20D67A577CA1DAE372ED2FE4D0EEE76647DD4440AE244B438C714B7D0A1
013E4B90AC517ED725DA1E6DF59B153AB4FD727C85F83CE40B3E32ABBAB71D62
1945DFB59ACBB3D0492CA5A51A36823DC364060DB334BF193A90CC49940B9B31
0B5232FF2FFA81C15A246A1B7BB9C4E85AF9FFF730731F327619C3EE361DAE20
60EE99780DBAA19FC244B087FE6031147340E228D99D12CC64FF049ADF999113
0DD93E7433B94133FD5BB6D330C97EF15B480A4F84265709195AD34E1F6B6851
162AEA3CBABEBB5D409898ECC5170A5DD8F19A98221D2FE88AE8F1FD9D19CB2F
973175ADDA029E8A5058770823CDDF103BB17A0B57E328BCA005FC0D9748A2D3
86C0D261579C2C592913CB75790114482E30296EFC860D2A57D7BBCFC15FBB24
2D463C469BAD20350A42B440EB4EF13FF8910B710BAD4BE96382C077DA3A623F
60D70D0BB625E227C13948A56DF10FC5B8B5B6789BB54227FD7BC1F9FEDC5038
18E76C24D36E4A979C9357FA3C6C2C4B7ACD1F5029F76A9745E6F4F5FEA04E0F
2A4B3096DF127EB2FB50A7E181835A8078AF2550A07BD9D01301661D0BA3838B
D1FB87AD57A2F95B92BDC569AB0C4D12D71FDFCA9AF6D1BCAF7CE2FA3FA2095C
2217FBA40D1EFE05BF092461B4F67D7DC08E5FADF9B85F2BFF62B021F025DEAC
8F8E759A019FB30934F225F840CABDF1D7A25E9CD97E1E4DB055DC86637A1430
C7107695EFDBD0243E51EA90A16FF6950E28C5D00FFE3CE7DD9AB3C3FA395199
F80AF0153C1773C4B9B200E03BA85A857935BD28B2FB846C79E0B660B9DC5E66
5EDC04CD85F949E178DB03E941F596C6B9DE9E15960EC72C617CF9D906CF4F46
AACFAD40433B9B1B7AF0EA09C43288B601895DDC8D2E13650FCCBDF365295709
7547E3505ABAAC91F1BE0C3D9636F488379FAE11D6EC22167102DCD659B2BF16
21DFA6E584333C38C14F5D4B381B470F8EC3BA011EB3FBCC801A1A9C666AAB5F
54BBEC927BAE7B71D83B671094619CF9B57D32B7F5422C7025D6B81E789DC439
CAF82EEB3EB3895168A7AC8581A8FB9ADB10F03493F3AAAA53326FBD5823682C
5FA52134B337BFA6A2708D7EFE2B2819A3942F3565BEACD8D6C6254C76D3D25E
949042DA054D62E52F4B02A5C0FB14BE3DA85923D1758E5AE6F63445CBE82F8D
804D9F1F453181B8F6CEF4D0161D276BEDA774D4E491C225D5A00D169323C873
4D56E5878056CF8E3F67318FABE14467A81437F3CE41A2B74C41BD89557FB4E9
3ABE9ED5B7A52B2F8DC5007BF8B6566C1FEDEC8CEA03A1E87DF74F9FD3624BF7
544FC3231BA765B61696FBECACEC691B5A9403554A4B724792D26C84C262C773
D7661387BD1CD0489B443AF78612252B9039F5FB23526CFB875C4E2E7E868A98
84FE98C1383EDD3A6CA12603E0306AB7AD095FE32595B2F9E0A35F2B9B84A647
9C783F7CADF09D8FCC05EC0344DD2BAD04D6566E70EA5ACE58B4539CD9269BD4
C49E099920886F18E7DA65705DC7CA35114D0868E0D120FA1230F5AEDB7D6E73
4CCDB0B51B4BDDB82CD3D730F0AA15A0E9542D7EF03A648C38585087529EC4EA
36D658737C7229A2C383766A41171E00413EDDF52FE712EAEBEB0C690DC8AFCF
5D4BAEA7F0895B330DF795D51ED4CB9221317C8D9F2630383519BD1033D41093
9938B4FE9990E5B179B085A88D8A48BE50E57657B376DAE6B1787C46DB5A4595
0D485F880314ED46BB356FE9E9BFC9D2E503F0E1AF77CCD782D000CB1E4CA70D
94E86891E1CD4F338E24B0B2AF33CC2A32A0D494EAB30ADC515981C19F9CAF73
516C7C30565C192775C12847142C6888AD2B2C60AA607A9CF032A8B2751F8735
88C0BA2C597554C3008A376E61634F6AFBB4041442F1506642CBEEEC98E15245
76F03AD345A57864930111D2975A104DF3C2B345540E911E023B76AE699246DE
3E22BA8C826D42023BE0EB08D819EF2D777179047DB6F8688CBB543D3B8111C4
0439A7363654F0DF293296892C589C56D090E67BEA61BF9F21B73A951B854891
554753B0705A05DB22D4920BCB78EF3F1463F735B7C10F1C1AE5F850A2EA7278
7B5865AEFF42B446DDF5C9EA6F6EC752D426F3DD0E24137DD680C4E4167CAC25
E8A1DA143064DBF0893A15ED56307165AEDF16E2F70A93D0593C9CFF77BA0F66
6B0DB8D0FFE803B679030A19DEAF40D860BE60CA803F5DF1325A49C4244B2B81
A49B8367A22D4D54C7F40A3C839EB05C8F4825D621154111A78FD5F6CF1D96C8
81C8AC8D7480B084D2FA2795CDACC4AEC3CECBE11BDA2F6E67EE714F64CE91AA
02E596BE8FDC8293967728D024757E2EAA6F62DD205573B72AC4033773520374
4732E3F8D3FECE9F79C6FA62372A518D73803867953F33D6D3AF4180565CC281
0636D594C60F6D0EA8B2FEDDC4ECD2E027CAA7E47CD799C3AFB57239835490EC
3F52F1E843C3B7E1585F3B7944D6A8523C74E6767BB4E6E7783CDB13DAD55D4D
CE7590D7D4A0844A8D92A77D54DBC2022A09066E388D44150D2495A5F68988CA
BB4D73DBA51836956E4FC7FF048ACF2F88EEB5D50215049B7C45C8E0968B0447
0F36724F383CC0BE8C48545178CCA3C790B5DA5AA35F395619F68A9237EF9D3C
9B61E59EA146816659080A1B663AA364C623EFDEC49AA8B91F5CFDB737A78851
872E5BBEB29B8D82252EC2BA8D1A90A8F4C23A690ABCB52D12C0CF072AE8CA66
FCC5FA7FAF1696A07354DCA62D36A79842B85A566F6B052B8347D3DD0F418B90
29EDF2657148840DB3EE726C661A5171BD74D47AEB007A103BD5763891EC30C5
7A648704713B2C8520E5CE1F15A7B024C49FAAE0260A3B9EC212204E96D4B6CA
BABE301F7D3C04B479052B2A8F3B676AD4DC7E23F2692F233349A2D9C8131E3A
488DB3B445AE3D214AFF349287C587A3F164D44D18B87E8128F6150E40AFFB2E
A9900C20D48087FB4928A2C4002CBF12D706DBE102CCB7016E7E55340CCAA2C2
8EC5CCD7F5BCFA2F293C41690A01F044C369366EAAAF276BD5E3BE1E53282AE8
80CA0A67428A2B7DFBC64E3EBAFDE1C1212225017D66411593D10A76DB2E563A
4BC5A1E53BB427555FC30C8CC44F6A068B5E4EB092F3372269BFF385EFD3CA83
78B068AD48561DD5AFC45D88054B8C2CA1DD40E930BF7EC62D31CD5FA685C54F
4786F46288FC4FB52C398982A2C7C994E28771A20C44B0480E76CC6C0C0151D9
7D9EE51F85FE1821A9C938328B1827BC04AEB0BA329613F7EDAB759940D99D55
B381ED867AC544000C65E1DD157AF9AC654B29BE59CEA079059DCCED73F94198
6C67201AC4BA9E33137590C0BC8C51D8A12A491E774EBF674C9F008088CF31BF
667737F3CC150D11D852CC69057C03A07358CBF3706A4B080DDE991586CB9ED5
85FFC507626F0B4DF1B21D41FFCCF494D014978DBE7D3D083E2F6AF4173F08A7
94E9CBF5AF0F1E4F893C9182BD59D2C4963A6D17571C307B42A3174AC75785B6
24234104BE2FDDDBA701141598F9903C208FF537A32D514950D6FBB41FF7BDDC
BAF925CEE889E3BF0F0EDC11C6CEAAD523FBEB27E9876B16E4A567C164A08CD3
A04C1F91CED9A9CF7BDADF19889B0FE75B3A62029ECFF80A655017ACF73F4900
B22B29B8A8058BF972B9B6DF5FD7B6CCFBBD0C8C16E5A8F67C28F1F056552345
D6918B6D6F488FEB96FF24BC25832B1239A40C6841A1049F7A194A177F200389
C5AEFBA5540D7E65D13F9864EE3048A3BFF08A3B4BEE8CE1C4CAB6F0862FE610
53F1212EB4E3ABA184736910F30981B1CF2D7EE377E097A4A25132C5733B4CD7
EE545C282BCB5B19C8A81359D93CC999B42C3BE302F789EDBB3F1238FF48F0FC
3C96FECB8D65C7D3C4FCEF9A6391B6C8D23A4F197A00ED409479A2E479EF03D0
74AB52A45B4C19DFF6C2AE96BF8E3B26115CFA8A54A242EC97040926761AB681
AEAA9A67009ADF57291CCF0E9F8DDDB492309217E4AEE16B04D5FA898EC0AD62
3C99C74E1A0AB66A47C1D9574A64E13A43AAC254CEBCF49DD62E7D474196C9FE
45F5E06F62F72BACCCC07CC8D288841477C08956AFDC1A1F451170FD5D15118F
66CFC38A1B39D4C162357C5ACE9E5DDF733344759A367762E69625BF82F6E39C
8A050769AAAAE2819063C0F4441BF8690EBB225B15A052EE46227374C5EA086F
D9404E6BA2649C34BEE257A200E39A0DCF5BC4FFE7F3C18A632FA99938A32295
BC5935F872A5D71C3C19F8F8B50A2062A57BB3FA98442A1361E821570E9D7D74
C7A2BBC339250FD472627D0231C36FA673DDEF2542D0AECEAD20C3F2A49B08CC
425FD9EB6664B9555F38B4842D82EB1D42D977B1C57209DC319F87C6350662A4
F52B4D3186C1688A4C5D0A25542C3F65B8B013F4685DAD35B5E3D7AB4057C7C3
26AF30B65102CD3331C9DED1EE8F22C8093FFE9211657D4C64DA8C8DF8915A69
237B319BD148F827909EBA9C0ABDB48BB85382F266B6EADC0605F23944BD875E
62BEA414E6731B4BF18A5C738F7696EC53EDC55015422C6DA9D1EB52312C0BE6
9864DDD8F313E448FB954363EBF98D2CEBD0135F610B1E22C2614EFC317B3EC5
86181B0D41927D9081F1AC50E6BA5806AFA59479138F0A5EEDAF601A0CC9D648
4F6399B80F3D42E07040E0E10D39633C088B6172FD4FC425CCA1E2B1346F69FB
D1A596B5CC3D71B51D48071CF88FEB29E968BC6780908B71FCC1E69EEDF1B885
8606089D9A7C3F7C6E9CEF59D2688991AAF6BEBA1F2AF13528D3598D47E81DFB
5D2B2A822F2C79CDECEF8AAA8B7F9983CEC22480F84476EC399BD5E81CE217AA
55594AB07DC96823E96FB96D77168F047E5937CC61AC7B2D429FD8621CC8B12B
966C3216AE4456000C184D70838F4ABD354CDFFA1307FD266069C26702B2A871
F588D5FF6EE644582AC8FBA504D7A2599562C5000C22E3560AFC772FF856D60F
007C12820EB50AFBE703D9617BE4CB0E66A97DC3A56A082180DFDF30F8EE455A
A5F403D80BC3F8D0A14CEB33B359559543DF8E4E2B8E6B7CD79AF88126C17A44
D68B8BF95F40966FCF13E8FB22C8ABEDB31F90F21C4B837957293C73B7354277
F8AA28DF50B54CE2DC59D5807BDCDF044BA8613C63EC06B65A81BD0740C27657
FF7E9B8915B560169CB5C33DDC646783CAC14385B5BD395609A94DBAE60BAD16
E295B620B9E7559BC2D272D50566AAC43374B6AA0F40B52A40A7241CFF200237
0FBC5821E3252227840605942165A6E8E0B34B5DBC0EDFCB0336F2DEEDF42FF7
D1A0478D8C6A4E7D1BEE4260358504330449B6FE019793473D814CACB3178BAF
E9DE406AE16D7229F5F1DC7CEA80A08584A38E5745C47DB82E90175D2DCD15C3
15886DFB61E456C7EA232F8C4BEBEF7B4C70BBA2BA84757E0132C44D38BC3048
45C846C3691A53B7E37B568EEDC236B5751B99165C8DDEF258CABA00EAE7987A
8511FC96053B0C71F73E146788B07D6BE1DF5DC925E6C50D9EC450EC55A1EB4B
A7CDA5A6C124DC09FC9C27F01D19EC64128C9043669EC75620FCF9193859CAAF
475187DEA3C761F5EFEF43C4933FDB3A014DC52E459273A83D128B7FEF549932
8D5A984A730659D916F93568B6B2F3D5E428882102BB42681E43612DD8099F6B
AB326C5C8AE1925C5A7268AE7214AB88C42521CFB589E5E7EE45770C1C75AC88
D9D89153D66AB250C6ECB7DBD0EEC148FF48843BB22915B4BD483BC4D2364265
40D5A260284C57648CA76FCB18087B9B5D4A33135AD1543CC3CE9C9B1D002CBF
04A7373F882026E5CBAB8A3DBB3D5553CE4CA78F87D3790ACFCA1CEB22BEC207
AC0A427058108DB19E015608AD2CFEA476A6EFB196DBE2AB54293DCB39A3945C
38CEDCCB15B587A1B4927F344BB058725E25520647573FD98125E92D0CC33E5A
2DF21890A8615A148BCD2C482592633D429776BB34A644671CD777C88DFD512B
24B5E0BB60EE3BAF4A03DA890E6CBEE3AE6BE64E01A4EC8449470236D719FF67
F035D90343F81C9BB52F5531BA7412D4FAF797C31ECAEE48C01AA9F026D68511
11049522308AD30519136E49A4309F6D9793F81299D70BFC8D272A3A5D08BAB8
30E6BE1DCA5DE47B04F512378033A99D2724FF4E27E7D4D5F2ECA92F5371382E
8052B8104187CF15E74D5010380D64680FF39C7E68A7360BB1E83A12A5C7BC02
2E5A0578D4D365A0A042C56651DE91B2607F08A181350D6EF6FA7D2BC09637A6
D6758BFA82234879B24406D0B23C7BB90B792704A8DCF20A3083956CA6515004
CF15320E474D48E58E0D1102119A406FC1A28D9ADEFE78899CE46B90098D77CA
2DE1CCF362E209F12F5898217F59776F9E53D39E2ADF308CF85A5CCFDD69C9DE
8C091CEF8BB75405C54AC71C6FE5F3B51EACCAD24320C9D32040FBD316F01DB5
074E37B7C8922183D399D13CC66D6FB986F2B5DBA9E8558FA7668C27B2914C6E
25BAAADCDE90AEBD1CB3D10A59D6AD28E47A545B7ABCBCD420076F3D9AE40DFE
5E2F5D48ED26B185A428EF01018B6CFEE2634453B4F91DE75C9CEA0BE7E3450F
36B92035C5C6934A5491D8050B71A7CEB1F940A0FFB9113115E4C20FAAF82694
FA1AC64CA610FCD37780454B1499F33EF3F91C9E5331C5CB0A2EDF3428F66088
9F12FC8FB7DDECE54C886E7A64AEC6854CE6A0CBBB8C67EC30E9B2CC883A2DC5
9F1A873482AD4EEC6590605F0BD8D4E0A05338ACF24F40DD06E8A506BDCC4EA3
10F7DABA2DE388137F06DD08BC3BA210DBFE6C7903F77AE3E3D07FE7D1153D36
3536AF1FF0FD9B70897E36CEC30C095A3E7F78ED79835CC5AC3DD7E5214BCF80
FC5344D2C5F619AF89A52E2A0FDABB92536EEF06875EBB1F07E60C1772EFFB23
04CA45B1416F167148E2EF8F34C2E2CC0FF73DDD06C5FF36AA969CD1E04DEC15
7D44514E6EF0880DF34CD4E496E2C0208D0DBCD6C934C1A54605BFE3E0C998C1
3BD72BC984F4A2279D86899D4064B4728E7E3288304707516385BE7513D17E1A
DB944C94E124ED9D04A52655AE416E2D4CF9ACFE4D5B757567AFC132918526FB
F9EDEAACC7110F5D42A9922706519A3BE32C71F227A6211A901CAEBE24E6E5D1
9C63FE2D57472FA2BB2799BAD84D638EFC2969DD69806820466CC1A44E9AB322
9C202051FDFDE0C8F5552335EA03CEC00C93AC3037307BB1EE8DCA1DE50C61AB
665E89292488A63DA0391D53503B38FFA7931B44E6AE68D3BFAAECA8962865A2
A3570AAFBAF4AC099756D5A9D52160EBD9B020AC6F30EC4ACF9C08E1E76BDDFF
7D57B7BA327D64E776C3A916A38461BA073E07069976E8B9ADE84A27550252B1
730A6DD2C1E761950DC0BBB7AC359AE5A0B2A8FBC555DF83B867A4E2F284E006
7AF177AA5F92912FB942FF3E85E0DF7EDC277EBCD562570E5363866CFDF6BED7
73C0A5C6DE819D468D5200B6FE615DD897C4DDEC1A368C72E6F756ACEE35EE0F
05B07194268284B3A3F3A1C78785A59E88BE761CC4A88FC34053823A2E28890A
386DAE2D9A01BF9552EFCBA81EF212719A3F612468CA9A56A520EDBC0BF314E0
8A3467CF121947B49AA870A64919923EEB770B2FEC7A0932A2CC8E6DAD217590
FC3797A3A8FDE71076E361BA4678BEF1089DBA4BE34868D098785223A2AC7776
306130FBFD1FB403FCB6B3BA065491CA2D974C6D84F5F0D68ABD63E1E488B415
B5A06FF8AC6589D68C7511BC9D54161CCEE42003F7532EE99F1B6C45F2605E7C
4DC8A85C4F1CFBB34B24FD8E6140A6ED6682D9513B44F36AE1C3930590217D80
CC4586CF343546CD4368847CB4A4622101D5108CD80017708CADDC979399606D
1486F087810564E4CF4843233E26F30C2A4BA9556E149ABBA0730A042CA249FC
5D0B782C26C765912CACF1846E590F2F65B273424A91DFC8A4E12D243D55FB91
E5918792542442E7320AB44F57769F8A1D056538200D7B0D43CA0DD3BC468C3C
A8BE7C4A58764C427AF2A1BC7E0B8B88F70511B2DF89D36D0EC0FFBD72587840
83FB8F882A8340E847A9495844AB67C90A272423B3BF31E3943213E0E2434DEB
EAFC88668094A6766DE2369BB7B8174075720CB55688D1DF62E369B8B1241799
82FB0E69F3D680EF988ECA6F958EC5BF908950A9585F4786CB05D23CD549E71A
784CBB0527FE704D358A52C8DC387D99FB026CDC80462E634DDB8C1301AAB911
FCF68008AA2D7E76F68DC7E50FB8D0905DD9B5FEB7EEDFB236A1D02A63D3EB30
5625813288A02A32EE646155643E09EB1BC7709A8AEBBCB6056722A9469F2976
231ADAD67AD6DA20A8664B35F06BE48362CDF003786D60EF1BF6FFC1BEA4C00C
08D4EC2DB44C2323A60BD30A4D60762E10580377534083E7CBC8A27C67CB0045
B13F9C97EF7106130F06DAE4428DD25F05016EDC4724E43CB509152BBE057ED7
31F1D41DBEB4CEEC5616BF38DF604690D81E783A5642806D9AED481403269547
5B8EA4D3A40A2DEE5EE24A4C5413C1F9670710F933AAAB5DAEF3A1C8DADE4643
5BA11F6FAB4DDFAF01DB57F4A00F62573C12069964863DAF7BF4D9E7DE19C636
11515B87EF86F4B7820799B42E51736CB4E06293C153E092111C5B2D2A224422
9400FB6D31077A02AD611A63C1AFFD664352C96CFCCF567CDACE50832A1E127F
669836CC6C13623727118F8B73B8F424FDCF1AA5907043BC829C4D42C4B50E50
1B105DBEA5F19B9E09738C430A8EE4EC56192EF23DF2ACBEEC64E19745B4150B
EF0EA682A051D978C383068C34D4E722F41EC04426EC995CDB136262304646D7
BE6D5667BBD16369D152E901747A2E404FE72B57412D8E6F9D0AC954DFED56C9
58767BC8E28BC9BFDF980D8929A7FB24849380D941B7976FB4ABDE4E59D26EDA
E42E8E535305D5F5FD71A6465CF88F461909120194B0B5846255C7E2E18F0FB0
E6388D4B481B751A59B8E2DB882712F257D81DF59949A985195BC727A164E38C
C5F5BE9AB73B7B6180D6C80BF54B8DA3A81F31DA67282DB0C0B01A5DB4CE8FCC
0F0E78A6165601E3486355459F57B77A424ADB92721CAEFF1E4CE0C89EFD2E35
EE13E37CE110CA0146AD0646338C057373EA28C9217A91C66B271A5B73F3056A
2413CDB0EA6FE7911EF84E1B7C8083BD186803099F1F8AC70ED8A81873A2E459
0CB06E79E753DAE7541EEEA77E89476B7B09E7C423498CA6E6665F8048CE9C50
ACDC78D09BB5D7F673A0C75B141FD1A8AC81B8DCA66ECD547D0675EC1ACD56E1
DEECCA2E0EF4EE7DDCDEAF3DC32A6284F3E4582C720555C14C65F7AB02E4B96F
A275633F5908315FDED837763290AC026D4CBDB581B7F06F9FF15D19F8531087
581966F558EA86023A72F5D1D2882CB7FD1D6F909583FBFF194C64312EC5209E
F5350227DB81FB59C9C73AF019301E1A79FC6B4135FB2B39E22510A5C870D529
8D601278DA3C2737F19369AC0881CF99FCA31EB6B80008971F8CDAD20E5816B6
06C926C8249A1FC7AB7EF3D898ABBCB0B8BC89F121789F00F3EC304D3F8C243C
852AC437540D80E5472B5C7F591EF9C40922ECEA83E145F2C83BE369457F9E08
F7DF6B8CE2C57080A9AB424C89EAF560C480A0E0AE7F98E086837B68BA632ED9
5A35754A6967FBF52406431B6F75DD9465846949B6DD0959DC58D32D9BCF844C
B062A0A81094DCAEA11EA4A063896DEBFCAE12EB48028F5F47DD5693F22CF1C0
F54DD93588126931E69314F2F54659FA65C728444E0FE7D6688C4E80546F53DF
BED633FBB0BFCF9B2F653516F25A29A357ABE94BCDADB1342839FB6589DB6AB3
6A293FDB10EDE3C2AB4D7F78FC1B506926C7A7831F5DC2CA5DF4D24548D67897
804ED5ED2D86E5E3A7DA5005D489EFB72934A931EA95044404C5328AB66A4B13
1E124F33AFD1413B5DC2FDD297D65648FE68BEE5F6148A76B2DC9660341F6F37
FC1565D1CABF69A406BF5B60F26A18ADD62E08612FC2F6B9D0A5F6DA930045EE
7D3668CA9C1F6BF3D191AE09506E3B821EC38CDE45CE21840EC3C776DF36B849
44F497D2C34303B648D8F015304CD1BF5CD16B916FDC4CC7185C072A6548611B
1E9E625E83541564B594F38E4F443A3BD62116B7D6B7C1C9C0FA8EA2E6BA5DF0
4663A00DCA6DA0EA48C53D21868EC9FE39C75A63B3C9DC97850F8CC8A28204DC
7A14995476959D7CC8ADC9E538BE88BC172497598BE2EE4B4D82A4D11791646E
206A6D5713998AC2554603F9D65A529D58B25DB4CF2BE17B2E93CE5ECA9C8FCA
8980F5E3B67521B166CB61CF9F4E79B273E8E1E1A9E0294D8AB9E64998255C03
69172E4452E3E95B123492B4D36E5B634C1DEBF961137AB8A16FA3336A75CF2B
4D12B33E1B70ABB9D045EBA1C7E1C961CAB9244FD6C5E294B1E648A227BCC1DE
FE7C57C153FB488485655C69CEC9AE338B3B8759F2CF578D464ECC698B348EF8
3A93BF0C2BFB5AB888AD640138534B4E1E3F443C719E74C1FC1582CC80C4640A
8009A8798DC3896A5E5CE475E2349E6A913E748DE90C45BEAFA24B8A85E85BC4
3AA45524E0DA10D53E29C40E33C159D11662B6B24228CB7ABE26822340678784
CDED6395D7DAEF59CAAEA7ADA5802ABA47AD5C4C92F8E2C9D066859ACE78191A
47CF314F5A848823FB2C1A4D0F7E14E4DD839D0AB37C55A974C86E8E7B9848BA
46E6395F6B30D4C5DCAF468067D14320C9D38E086B70DC95C0854CDE38B87BA9
55099344919514D2DEBB6F55C3A065613333135DAD0D03F5D07F2D30B45A920B
A225E63AEF4E8737512CD85ABE826B9614E120CAA282DA349C2DA1BC16D85EDE
5FA4164ED9584F4FF7DD225FCA18F6441B5AD16B57F21E0504DE9AD7ED92C802
D05B14B54543C420A03453ACD83BAC311EE6D20EEA667B4B038FD3C11D8992C5
EF8A3AE1026998DB975026BCC3C204A55C390DAC17199F678ED85C514C18B0DA
47A10E885E96F9A3FDF0C45FCC21A565EEA7EBC61BB2E2FA180CE03D82249B04
8F9891039017C7CB9E1867D8ACD52FE93AD6930DCF6AF94B69AC0863D4C4F40F
51E1AFE2972A65F6CC47D1592668F7623AFBBEF185FA8FF41CC5CF84DA946361
CC2836E964EF2720A4509AECA8CE3A0F41E91B6CAF40296C58A1A2CE4A016AA2
FF146490E802575A5EEBDE0227C63EE99AB0A5C29D7DAEA66188DD5BD1415B1B
5467546BDF98FAA52948C6F62776EDB51137481082CF8940FA218CE3D9853DED
60276824A18455672CE1ED60966E9275D4EA279341168D649929B034B2DAA9DA
0C8711DE766576C17CDE6C4C6EACC9CD51B8F8F4D9304D7CAE574707D66E4CD8
0FE92484279197F96BF42FD530497DB528A8C23FCAC7F55E4244D2D3096D8EE2
0DCAC3619ECB670E1AF5E5A6059C881955B130D2D7ADB8832014C4548D7DE726
06C35E34C661DB77D40B2D8C982184953F6B30BD7ED70A3CF0F2892E8BEE7128
BD4C42D80DC2F99E9EC2D60E8301BEA130EE8DD726A83866B94F23315D0F304E
C2D17953D8B38290C426A0693A7B7E5369A4900D6073F5BF8C46934670CF440C
C945003B28E1CED086A3B0FFDEB45259B003D84F4864E2A8106B7EF922522765
E3379F64EB5908FB0A45DA86AB920DF4E1501420EA128144B22765BF05F52FD0
70E228A9ED4DCFCF1E9D922E8254578AF2A719AEA4B02B894691C00A3C4E54E3
4516C96BCF007A49A755898CB6968CA78D229CE5F36EE1E51AD7B3BB33E05B76
77C9CA7D5088121B5DDEEE5726ABF127A46E78AABE364CFBB877291071DE252F
AD55C1904171E57F8E1068057B398FD8447655FEB021878AEF29104F4E0AE941
72E86BE04DC22F6365193F5EA69FC63C7FCC5B433627E2BD599113880275F3D8
09A0BF50486767EDE28E9B947F0EAB0A722CF8F8070113689766793F8E6C6BE3
EA5F86E36CF94A9D00F164CF2CF1CF1E0C385FA19FF2B7DD5C8EA10A02191E60
6B16F79BCCFD78CA619A74082FA6C39F85367C23CB97E2DB431518DEAC3473C4
A698A290500BD0835B57D9A4F6E0801B226A97910703EEE454A6EFF2726FB809
5E1B0ECC213849B15DB9BC586286A81166A06CCC0F7E8018F63CAE99EA39C122
874BCC7ECA22C3BE8F72A30F2C64056E63DCE28A9ACD3A97BE39F27BAD37B81D
CA359FA58D694542F206D4324C5A45736CC853EEE2D3EBF1C24CD8879FD853E8
001BCD8A7A226FC1F23CE1BD50E768591B3C7D578DDD3B28D828F75EB4C7B741
994841F668C08CE3B3CA9FA138DB79C9CB1221393AE28CB17F8A469FFB27DA16
5ACFD34A7C73197C24828E7BC5B9650BF913044B8D76436639EFF6E984657BA3
8944EC3676FACCE11C5C79EA019B1C25DAC1C840D098BAF2937920C090901053
0D48672DE3395177A3EE1C3AD495F1CEEB2B7A923A00B2FD524812D3A0186030
C9948BF98DF0D7B340B7F958EC1650DE2B3C6CBF6A20C3B1E061EE0F1A4DCF8A
C5B901AF0648DE74DD1687719D10A6F47B988A0672C87F3BF25136B6C015C07C
7B29D3FAAF3DB330276636E26B4FB1490A4A648D8596B5EC6D696BCA5BB93457
F0B4680901311145A8BD6A6D5081807CE9F8B80CB176BDDE82A59BD10E221F84
5C67CB158E0B16BAD69FA093AD83E059783A3F1D6AC4888F347EE768508CBF90
D41C0A34FCFFB72AF832930CB837A55B6B8817D8F01FD57B387896ED3B1D72B7
924F61A1029BD6674D0F50AD92C13C13F780CBBECC548E861E558B0D907A6546
6304448F4FE112F4A0AA160512937173F02BA3645DBA13B9CDEA0A2C7BA01786
9BFBB441F601349903B106BF2F46A26179D140741DD02E029EDDC33389705A58
05FA8B3B6673D36ACABD5E7F719862002F105A9CB7E1D0B349D073BF57D7A5C6
0F43DEC56216F8AA63780488E4000DC51E7AC436E94146FB739EA1DB6EC9530D
6A195946F332CFCCB5ED9251189AEA1DED3CCC3BB73088C02FF9DD1067C87474
041CC3ECE29F0501C2E028BB0AAEAC6F6070953B78EB56B00CBDFA4B1EBA882D
77B68B53CBA6AC603C81558992E1FFEEBC373A81223FD379EF73682188BF760A
23AA6B985BCCFC843E14D5C4C40E6B2AED53DBA74E31AF4AE3CCC13B6DCB64D7
1E78053857BCEC26FC60AB7F556F2863A1F5E7B85C2BE646B022ACB83102C437
E330227E2BC44D184E3DB2A69CAC46C0B51EC716D55FC28F626316C60CE93F25
D02DE49C994435F48ACBE92418D05141A30104BC6CD9002755A1DF21A00FB87F
7C4FA9B2E79D01E303D7E11CFE44230BA8F404826F62B97EE211C46B36D5E863
F57F5D65F5BB0E022692F52D5FD2CE4538A1DE2D87564806E4BB9B27A34D4983
63B6D013C52DF631909B3FA71722716E4F1926E22C255C6431BCA2059F7F7A75
FEEE38096B51C20CD14B2161381B6D948AF487CB8B892E333AB9FCAB8FB8E25D
B8EDA70381FDB8237576C0D1F07651B7506860037DB6D504268051552587A6CD
DB713D6F93C9A0E02F1D0567302D253718B608F25CE873F9531935C1772B5E09
7AEB0940E3A42D237CD71EF43BE446353CB528DC0C4C904C4F1A53E5151B7767
A9E02B8CCFBBFCF12D12E6EEC049A6B20D92451B03AFF48283CE63DC5CC46E0C
C2A36D1408743767EC171CF696F87989EF0C9153AB8702DB3D0CF6412D4600B1
128BC8E6BE9EB6B84C8A175DC310A59FD15E865ABCDBE34CACF11A33513F529F
F4A360CE1F3749A5A55103246E9ED639358508CABBB7EDF914BA51BD6E7FFADF
F80BE6597DA35DAAD1F113979E273107C2241D8002436C07837AF5DD7D735591
07BF5BD55477A11D2F0C1207C92C8EA71739400EE73E6F1EA9604B02E3A38C33
222BAB179083287BA87A13AC5C368BAB30A3826C54F43380E311E36615C0ED1C
7EEA8C7F9D7AA40BF3786F12F43B95A0CA05AD9F9A58BD8470BA85FC78CA8750
98064595879C2EDD112D3ADDE23D7F75ADCB8CB1A2DD3D0BCDBD1A187DCC9B7F
9141F020BC74087F330506F3A69EF9AA92E7A6DDA320CED0E945DF7E93F46BCA
819B92E82730364BA14999B0AC977ABF103196FC7FA26BEBC61AEB5ED793B8F0
5A9B98B21CE09588474AA8278CBCCA2FCB5A33A9DA28DEE5F118FB5BF30680DF
C71DFE3898BDE61FFBF582C12FE3E3648BFC1085AFC7C20A64F88C57396D40C8
C1DCDBAF88C50825D32836E283695BC37C174688135F0615E0CD033F425E0187
E3D29EB2C9BC878E9B1A7F687304100E8461D31D6116D82DEFD2335432A8274E
77AC71466435FAFFB45AD2036D4157AB28A38C03C54690DAB2CFD94457F2BA00
3AAEAB62013BBAE9E8F470F496FA053085F4D5A19087352D5B45690A2D0C1474
94709DC859319D8762AC0B9CF2A9107DF474A7B83480048126FCA6FDF3263B6B
F0E7DEC3FD884F6F20D2E38AE2AADEEE398974BBA72E9106AA4C01AA2F25E906
C96BF004C881981CD105566299B3E7A5A6DB74701B69493758FFE3209E93D14B
91024F2A00B3405F4C9CC4A17CE24F775A8EFC626AE1F16CD7EFE1E80A4E40BE
DCD712FAD06596A7D2776BDD007E2D8B43ADCE631E4CCCAD8DD0A84B024BE172
DB8C6D34C49DC3A80336DEB5B82CB4878DD10400598D0B72F38BA0FE63B89E61
7271A2D8E164458B82B9091B140817988DE5131EE0FA861A356E380FC7A18B95
4A22E3A92E6DE8B2A2D72297D3ACB8DE593935D833CD991CD43B315A17020D69
E3670BB724521D8388D1BD99D5F4351C2AE6A573631347E0C7A09C44D7743990
C6639BA3B1CD3400C1A81915FC84541D3EA381F94C48F0A52B40687C9B78B134
FF74AE58A63D9E6870E927019A7878AC92DE89B47F8DBA59797F41A698243441
5C31AB8850DE4FFEEA00477190478A23CEC4FF977BE90B3FED8C3E486D866A8E
623F1305689E0260671DA4CFED7B03F935F53D1B9AA05BDAE97529F714E07FC6
FF20758CCEF4E4AB91F804458BC4362A31B2C5A496DD530A9890CAB7F4B98309
DDA0D4B3D16B9ECC930C06B3700848706EC5189F1C1B42C60CC78D3DA26E2246
3FB0961DCE52ED72A1FB0B7049EAC8B9CDD0DD416F9094C2094654D0E9B16BF9
1A6D4DA8D60A30EA8BC12C1CFDAD90630BC807EC1622E5BC5815793CA9182FBA
4533D7CB797BB3DC2ED1A6644C1355991B7C59F13EEF547BB20A81E4BDF9FA87
B6FA69E5459C99459D4E11432CEFB7CC0A405D326D0009B3B8F8A9BACC63E73E
8ADEFEACE9CB498D12689722E6F37BB445F0D924BDA57F4D11F7D82F74FE766E
F1952ECD18727655FA22C68EC97CE901A450706570004322DD1B499AAD76D3DB
97329F9825FD4E830CFB67D343127EFD5993CDB24C12480D2542CD731B000731
737040FF8A34754831FFD9D84C6BAE25005CAC06C04841256EEFBBB48B135C9F
77987BDA3CCAF618C55686627D93A8E5463DA21898129B243C51BF18F81ED6B6
C6D9B1038FA680BF2B9C8947D6CAC524E59CD7E4F40FD799B95675A71713F786
1DAB8E9F1346ECF9FB80AEA792FA705B8B56284A26D4C14D7BB221AD5C47E0B6
43C811B8EC3D1A0CBC33BEE85E10112FEA7774545ED754FF70B9BC2FF9696EB0
68E85161E1E169C945D1AAC06521A1EA7057613E69245FA092828B89A2867641
5ABA486B336EEFF59CB996FB7B428E101AE28C00873BC10A24CCA306D62CF399
9EDC7AF0EF566987B03EE0F26DB2CE4AF045DEDD0FF0331CB13A1627112479DA
64A75343AB4D587A24EB95286B7E32C997BBCA1B72FDBBC03AFE532F49D09CE2
ECDC79EA9A8828D853E70A613AD5D6529FEE1077EA04C49DF96469424DEDCE0A
5834A6F1C3D7F11ADB96B467D257B061019F4D37B057534B3AC57205B8EFA545
6789A603CB8B9D1627FED14204D2860815BAB1B625DBCD0596857BA15F965B38
7F5D5C235BF6982DCA8D12B338DF044F97EE2A22D0BE7CFC7EE4C4A93E88C37C
400834BE42CB242A2B3AFAEF87CD012B8635B34894666749E3FE65BBFF4345C8
595D9D0F84215BAEB90E5FB2AD7CF4CD4C496811CC1EE62E34571C5C37BA9116
72445B277BDC3602BC07DE81A73CF26A73889DBC96A2EEE987EA6756D566100C
7867BBF116EE7CEB8D762EA2B325D54458497E1CEF8AD24509597087AA7FE32C
457F8DDEA51AEB3A505289BE28C23273AAD7508D8CF33D05630D1C05B10C402F
8188CAC1C5311D44802537F8776398DF1D6EF65786C99F1E89FD45B09002C98E
E58FBE7DD9BEB5C184D92A65E087D1F7B7E53736AEED4D8FD1D7AEB7F42C0637
AE11AB7CD865A4BB9314A43E8E522B838B3675B7953EFED2E46EBB679452C2D9
DEC12D42998D064F33539FB20999C953EBCE658CB875453E6987590B82E1DB54
9BBFE32BDF4C42C04B3944107ECA0F2F5327DA875420A83E8F1E1D83FB6781B3
4A289E997DA3F0727C643307E3BB17F7BAE66B37849FD462B3190DBBBA70ABEC
89B04F89F7709A215EEE4D414F662D69A017ECB8EF1B8207BFAA3F899C969337
C3D651718D6023C9DFE57EE03DEB2452226D47C1B1C28C1F3E3E8F2C02FDF317
8BFF9D6E86CBF295AF331F118BE2132B6E94B58E38DE6344872B894EE776E8F4
70477C0DDCD613FE8BB1911A17C06E98A706B912DD38346E433FCAB1BDD6F7F4
E956AF347F6734125A0CBC8B99783D9388145DE1419A0FE5150C45DAB3D83871
20913872F699390CAC419ED741FE20241D6D7C2BD3D0E0BEBAEEDEAF1F5B1ACA
89D974B574CBFFBE8381EA4528CE4E575A0BAFBE1D5FD35FDDC690E7E06A985C
EFC50AD20BCD6660548EDAEBDF6F0AE24CD360A05EB0AC3CE2AEE181C1C800AA
DA05C5C5E6349BB375B4E021EF97F2D85465658ADF9F4856FFA072424D01BF77
14CC2FE0527ECB7012DE26B354B82453B2F1BEB090BCE67B7C9581F207162102
087B00E78B035ADD226AC0FB98AB21541ABC0F70EB59CBD09EC785E24B9C2CB8
C241BFDD298BF005363D9B059DF5AAF83BA4A6531F544D63FD846060429E152F
5B744C6B484E61A86D6B8A164129785E7E6899503DAD3155BC9BEADC8B44C6CA
B7ECAA5891FAFE3ADA220C9A26EA9990DDCF9BC997A58F990427F44926789AC6
4854BA1E528BF4E1092AB176F37A46CE577E29E13D82DFFBC95C747646A268BE
68037994B2CE1861FACCF001C9A68DE81778F9F1B7BCC1F34B24D6E73C648770
D5FE75FED64754D42B32BF5B24F857003B4660FB9265F36545AB97EB4DDB8468
35FDB607E096EBC8A892116CE4891D818A41C9F855BF871479C20488A61DE7EB
79F4EC4BFB37BBC1D41B4FEFA1DBC4BE0A149DF542C446B7520DE3B712FF7947
D8FC17C45E8AD1D2AB51DF003D9193145750E0A855BB1072F6FBED39CC967C62
66FD5328C74A918126CDD1A8F6341F35E0360FC19F4738E702404EED1760A4F5
6B4DD90E36A7ED091227DD4341F115D1DECB7129997AE4F3C06DB1C8597744CE
81AFF431526F8F8A6B3DA7DFD0535010FB24D7F0F182091CA055CA66110C55C2
91F00BD058C203B8C0992EBBE381CC0B4E0B336BAE4CB9DFCF2469CBCA66A2B8
D544664F36F453F14168A93797EB0CF5EF5C725D5413CE59AF9A60987480E052
6C4D83E6CFE9C9964201EABCFD02AD42663F95341E3C3E510B21A1270A223DF4
3B62F252CC6C4804A96DEC54D809DB9ECCB70FA763832EA6028039CCE53DC0F2
A45A28DBFDD97C06EBD3AA3EC2E0E11DAF320AC1A44C27943D90786CAB471FBB
5DEA1B9790F5C4ED09881A768A5C06EC018F74C6952BB53EB327CBA6A140F0C7
A4E9717048B20DFA34F649DA776C4EF1C524C34BF1496F29D7392D411F2749F7
95E48625736162199EE5671513D2974B366E0B864214D7DE865175A1BF22E613
120722579C7167D607F8FA19F921A277973C6F7A3DB0656DE1F0AB96A64D748C
93409349D171AE65272EDBDCFE9763C9B9A922776C7561012E6C453CC6A245A2
04802719E6D8961AF83FADBEA051F76DE8CC5F1ACAF0C495C147C5E70009AC31
4F8A9B6B6ED52F152722B225DDE8AD85F5E48236F0273CF4AA9F7B6253F5616A
1036FE80D41899469BDA45C9B92B12B9B6313AFDC687D24DFA42D82C9EA55F74
FA15CE912D975CB6692FA793B56EDB9F1F188CFE352B335AD5F3E17838264E00
E06F0DEBD2FCE29A1986E511DCA7B5E61365C1207BFC837268F80F1477C1F031
994926EB8B14359CD30D2E4D6A61C479F8DB851045DABB9211D44A36E64BAB4F
6EC76F533F14AF3757B9B74E4665CFA585BBE14941F09EA4FA7AD9EC20274E8F
54D3C89507C8A9FC4C41E38E0C8ABE91C90A679C7B413F8B55281D459C1605BE
2B4496098B90B3DF2021642246483E8882E77D331A1EDFA9A3E77FE67B20E9F3
B4665B3AED3C3296E568E3CDF389D2DD6375804BD796A02E397E6AEF9DD3F21E
9FBF705DB05D64A900AB44FF45EB6BB81BCFD19389AFC72B99BDE2EBEA6BD110
1F65D9D5400426351EF7DC5926F23E8656C69E5C39639369A0DAA925113ECE8E
A7D530C0F16F67160E6D7CCC4F76D9238C041AAA9D642269D90337152D05591C
559759FEF7E73B10BFCFB67695754F697E4A5F5433B14D235AF5CB15970696D1
99BBB9D837BEAFB9F3E7B70A0566AB974C249F0B209BF2528775F012033D44CE
440360994473FECC1DE52E9691EEB3A76EE8BD8D537CE52F873F173C9A96E626
5A7752C96F32D58EA1CC03867DB32305EE890D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFBX1440
%!FontType1-1.0: SFBX1440 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1440, tcbx1440, labx1440, lbbx1440, lcbx1440, rxbx1440.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1440 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-218 -316 1652 915}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6B55C6E47AD7A9A958A6E22E00FDD4D6492D53ADDC90ECD778346C06747
57609FE8907DFFFED75E2CF963A64C7F72488F4A02372BE681E9BBF09A9CE5A9
3894F6358C244FCD46C148F1EB60DE2137E6D3079D6AE03B3724F7D7BBA47BC4
41C27FFFDFF9FB7B7738A8D88C27573A53E244723E07C995948DED2516B6044E
ADED62C496A56BC14483D307884467ADE985655A4712DD06ED00811F9A05BF9F
BF2AC66203817289FFB5BDCD0445293981AF6F55928C132E885ED009DE1B5FB0
C230370EB5156A8B609E466F00F768F0A52ABCFBFCE3514C0FDDE31E601AD508
2666AD26D9DB386B9FEC80AC197C9FE7447928C0C6A2858375F0A1D7AD3BE53C
9A926DDFBAC60D846783AA97CB86F804701BF53F7C4D18B925FD604F60231215
EBDF4FAD73F2D13518E1901C3DA00ACE65647765106EFCA89D1D9F9948B28E5C
88B31806AF1433ACB13EE555D069E50649D3C93032500DE92DCEF42B7487E4A4
1ABF7F6C8F177A4CF5776AFDE02721C8B9F69A7CA769B2466EB4501A7E5683FC
58FFB0982039E9154719C1C110840B2DC207902F8EE3E83464C763A03C52F60D
D7194DA5888BCAFEECA5C0AC8DE6DCA956F1D0E6AABAB6E20F7B64BBC9871543
D62E73F596D732C3A412E916A3EDADAC745BED5D2176C14AF05DC28DBEF5C944
FDFFD52D98A35990F8D5FE21D5DCF5C9900FAFFB698C14E56B6667CF8734534D
8698ABFC9B4BE68E86CC30704F0CE920EF1B2B0F3A73E6FB24B20F9702ED522D
C0854E870B8B81B62B48650AA5E74D2F06FC2BB2E06DAE38B8F0D9DA159649BE
4DE0386BBC928047168FFC51EBD6D9576245D94E44C199010D5F23CCEEE24F96
DF41DC96A889A2E488453C3E27D4CC22E516C5CB13A29D99A0BB3FD5AB796EC2
01EB476BAD9550AE09594793FB029333F29AF1F4EE85473BB6F8842046BC4817
50BA909A13BA20AB4B91F7CC5AFE5EA811E081D3B0B0BBDC426340C106DB384B
30DA6D6215BE2F566C12B1D9268588F26272576C6C51639194E3FDF847FBA289
F6043C0D241736D55A53F95F1A66927F0A67BB50B6C8301A7E20BBC02BB673B9
D49874E3A3B962CBBF49CBD0E2ED453D6CA88C522ADFB21337599E8EAFCFAA56
4ADCF4D6F0282B179E3D61CF78E3EFA9B86ABBE25F62DE876D9B8C7C0BC8DB84
32A4947CA1818A08BB9E32E688896B0D80A940787E91B19A68DC6FC196B02EFF
C6C84162CB4EE743080C84DD94C4BB4B518651C4D581B33ED79394DB3DFFE16F
83B57AB1597065B9B6161CAD3D4BAC7397F833B652335C1BCB5466D7B3B83219
0A747881E45B2ED61486AC188BE84D9222B2FD0841A2984E41D6F1D1CAEDF7D8
733638E4052F6E6BC8E1874CF329240D952DAD25E883AB62938F522CCEA4ECA3
611A58FC9C6AE8851AAB8A19C1C03F5CEC42C5963A22433CD8541C74E528690A
098B5879AFBA7DBB74B925EE410DD0FF03F1E663325A4A8C971ADB484CCA8406
91FA06C62FC5AF0244F2F4F8A058BB89C1F9A4DD5C219CD090B360E43610FC37
8225B123A5272195BA660D49172E0989426CBC3DAF2B9D4347E7FBAE8B109F4B
C8D6B93EC3EFC79BB6C857D590247133EAE427EEAF3D3C5BC9213FA93D9BA075
535A030B14333731547C178FAE2607C79BD7D050D7FB3DACC15C8F0AAB881153
E78C55296C36F6BCDA9A4809692E0508F43026748223338CEE650A6823BF8234
141CBA1DEBB862F36CC96A8EB579498116658C19E3245DD2D8CBD8B1EBAFB0EB
EAC2B52AB9CC36D00470776157B2644E82C3BB6A497EB63A6FBA91DF3AAC55B7
100B02D379447D2680891A23677CF06ABFE9164B8CD647B6ECF445C884413A43
99A89478F8C8EAAFCE8680A444047F15545EAEA643AF660424A58E8F37C0832A
E4F540388850B813A1BF3B54AC4C093220404E753034519C81A3E84C3E122D4B
17CCAD6FCFB635CC41FE7FC58AB9CC1C777474C40AB892412583F277024F7A0F
B1B387FDC96D54219AE8C4AF100F187145F4D7B6552DB17B616A403C757EDB2C
49B9CA15E0DD3C79E43AE197A253559417FA8C512E646B34E563D83F5245FF94
7E03A242628E5B882A3D1F783A442321976DE3141798F93912F93681954576B5
2636D46DAE56DA99AA84A2CE32F5EFCE7F4238952DC78CE4660DAF84AEA8C227
331934FF182028D062F3620436EB775D244ACAED9F8FA65DF6B1D606E8E43DDE
13403532F2C91AC4D6F11E9AC04682962C9BEFFDB7A02836639A7E062BF9C1F7
C1C1C4203026504A89E904C8A3FEE8D1DA3C13C047086429568801B4B7F4E39A
56C4BECB4644AC8A3A7AA2A1D7463ED6985B2C2716DD51EC58CA0BDA0FBC55BD
74F9D259D5B41005A223E2BA5BB0E57C03884FA1D4CCE3368A183F82EB2FA5E5
B4AE213B044151D6FC56DBD2697844E0F82837228484D0F9778848D0EA70E5E9
B2A372B72DC8934D12BE7CC4FD908EF36698F619ED92B6418BF270BCA1DC2715
76CAE03E60A6668BB9953FBAAFD8EB663536EA8AF78C56F766197A7689D0A96C
879E388256108F0B7A8106E915608F20F4F12BFD74E6E808A64F4E52D1446648
C3F8E031298F8F6B961520EE6B9A052EC36537B5393780908E026DE9307561A0
CE4D48F56E0721812A2BF283747E516D03F0CA73327ED6BE38D9E831C893607D
FE803185A18F10F20A1E6C8A5814C436BC431AFE4AEE72B22A421C4AF23A5ADD
94DC3069F9295CC3521987B49F9BED16F3960F2881956228FB6B9095B97314FB
D0D480B97A8C3310B0BB92E119F67756352B61941DADAA5F8EE42ECEB661D285
7E66B39517A34B52531DCB3105E95CB820CD35B882B3DBA9B721BCB2533C4974
A10C9B39F1E893973D1F45643DA5DA936700453DEA34070BF2E2EAB9CE383B7C
5233B9FEACED707CA4E9F7FB0BB25BB133B5CC3E741BCF65FB9AAA37B2FD4D5C
3BD226CA958770254F8C4DA03A85ECEC272DBA75A109DC57F4C07EB4CDE5F6B5
D4E2D7AB56181E91CB28B035435A18684075F1D3FC07EF8596D6BFA666201A11
E7AE7CD2C067C0F68F28731D15AD5AF114A920C1F9CBE45866360C9D4729BC92
9208794150CD80D22041DF8C4CACFF62D095B5C12A395D7A88CD54602657410B
E688B26A47D879D69F40D8711229E2CC51E684DE0E39FBE2C09DBFE40ADB929E
0C2B1CEE1C0E8E28D79A0112C84419356122D842719BEE2D48487458694DF4BB
17A80DB606E6FED6B7EF54B86BAA23A74AC3B19DDD57DA9AB6B14292ABD57D4F
643D8B31539A7E4911DBF1C53BE0B858CEE1B9371CE4ADA698E8756B5E89CBD5
264C2DA9C0F3C38F90F3AE801F82903B8BE25A7223B4A29B3D1612CCBE7E0CBB
9E031AC71C52C5A16F6919ACC86379FECD9831BE0D734DD24570A38787A93FC1
5129389161E747000FA788C83F264CC64A6D403FD4606197C55AB118C32B78C8
211551E3C42A87CFEA8610F506C98EC783C11AE8A25038A17FA32D7285B2C354
9AD3376174E792C362F039ED47F5313441AE0CDC7932F017D6ED3EC8B626FE41
66C38B7DCAE1C750E212EAE214098A4FEFED74E60BF7DF0602DB13FC064AEDC0
AB3A569E5368B1F8C17F3A5A05E9FF2E8AA3E2502D74A16C5D4872F6B02B8A87
D625E9CA665ED2BDC3600DCD94F6A13F151D65A9C63E4081FE638DCFB5CB7A37
135058762A187C45D80928FDCE6D6BBD97BDE501417FE127260337ED9F7DAA15
DE66C03DC2034BCAF5FBE8F4971CC43802D4CCD92BAA4514EDF9A071484CB7CB
A56FECEF89358E2D4176E71B534CB3606AF4470F8DC9A6EFD11778BB5C407D21
90999DFA497020F073528FB8A2848A0641A2923A12E486B6E5B03FF147FC71C3
A38EE183872E75C24EF7B054982D90A468C050A679207B3DC19A5904059CF76B
116F0172A6C0991A5CDC8C304F2F2EB3C71B994C95962826C313F48E131BE8BE
D7A8235D8B6AF9180BE93B8E83049106FEE5BC7274D2DD3CFCDEE2E4EEFF5117
056ADCA2E413F7827BC03A02D7040923B3CC44018D6F607613E8F108B6F6BC35
F7F366F685E365FCC858838678251241B46BD5FC26C1A840B15A0B6AA25AC885
C2330BA63E2FC21892E6DD2A10D58B5D41193311210380937DD1177102D6ED54
BBA43B136FB35426124BDCC670BD901614682E0D74320CEF72C3F74CC0C0930B
81793E9D328A9F0E2DF0378537FCF5A70A915837A3B800C67CBD6B2F3A498C1D
923D9C0B0D233256F1DBF830C1142BB7C5136A498E3AFEB8276F2BB6EA72FA38
F1ED99AC79D21B146F7B91897344AB64E102AD1E5F8E715B713EC35AA90E9B38
70E1A084970BD23F85BF2826465E5A794F087B0233738AC75B7798D02A7DF16E
DD824FCCB58D284666F3523974378D93044B7C460252762E426C3EFE551EFF30
B8493349EC411621F28C64D706E117DE4BCCDE81C48241295CB401CF3023013B
E170C20974DD9004BB24B556940CD03A5FF4FB3A55ADF1D9E7DE191F1B6A4470
E352CD37681CFD6F9CF7A9F8CF08C37E26F463FD66F6471294B4A5A0A62133CF
9ADD6AB74B4F0085EF4BB9665C6BF6A1C7E4A424C61E753AA41C6B51DC154EA6
F81CB076D4861E8062435837C21B954898191707EC3DF25240C2EA91DBBE8D91
ECED8603FDA805A84FA59A403D1ACCBA870FD18D0164128A18C9572457E6FDCA
8F409C2EA15C0663A852293BE73875C4F8578FC7B8D0A64CA2E1F74124747226
5D2A13A2850808507A37AE0523EDF1F4D005CD4DE87AF4FAD74BADDEFB530836
0FD8E687A14CF958672E96F2B4608AAF2AC28E9327862E9C76013465B46C21E0
E5D3F67EFF71077291F1436AB8D187E6ABA8C6F7F85B5245D2D14DBE6F9AB834
ECB4EA75969C7423509A8327AAD2AC00EDE5DBDC5AA17FE4611B26F2A350E393
68F03D809A6588F58F520028864739273F7873A164E8C0FBE06038C26A1707FF
9C4FF76A65D3ADCAFD64EA5B55364915084F016F79C7D0E6CE734D1CCB034B70
D53FFDAAF3AF63729E710819757F2241780EEFEC9A601506D5720BBDFEAD85B5
A4BA814CA2B258558D55DCD2CF75C867BD5890E2D6A6486E8BBD8926A42A599D
8707AEE1C3D4DC6FD366791063AA35E448A263EF78C304CFE1A4269E5E436C79
CD2B1A84A01C795AF1E6D48BD67788E02FC8B599C01126C4B5287C153C87C51D
D28F3794FA1AC64C36CBF528015F2C12ACD2331E3FBC301E882699569928B4DA
77871874F63AAE99B5BA247A9C659B1BCD73374585A4C24696186AF45F946F7B
C232B84112C277E0F83EB6063D9ED262A92291FFFA0129BDA46150284E5E17BA
4FE83ABBCB3D6947A10605B67F5019AADB3B4EEC2651C52A20600BD68F9B5248
A84F719C44432BD9E322EFDAF369EEB0CB729564274E37B455F0F3AB96AD0636
7380A2D4217212BEC218925E68F7EFF89CB9164EEAE43F5830FC7FD0331F1BF5
1BF79F862E805BA847A7B941E49033EE066D22E67920426FF193765CC7CCE85B
483C22AE9A15CFF16DCC8B88C7815B8EFB6AEDE27BE8EE0AD75D15E78F084DAA
FCAABF637EC7AE94CAF2D9BE9D6B06CF90F8575174D0F6B72A7F26890AAAB50C
4B355789A603AAB1A2CD8FD5A25B6D22FDF5F0BFB4E1E808FB3C61938E36177A
FB66C416BB8BB33305606FB764FD59C45B12286ADBEF65954E4749A8DCECF33D
43F47C6F53EAD6567DB2F14A00CFB0AC519DE36B7F9E5ECF3080640EE3EF7B8F
999268F0EAE6D2F8552CF733BFE5EE539084920206002F2119B9E91413D44296
3A978CBFB965C82A6769766A7B8DD14F8A5997247E40257C1FE5C4564C4B59FF
A6AEA8AC23F0E5955E1A86823E0CD5F49C670D07A080C5D35A9A2F0F6455E17B
063DED4692A0FCAD095F7A82454B4914EEAF42CEC868B29AA4D0AC102C2A0CC2
7013989DEA87D9B65C1CD41798C767922152C2792A819F5327EFFA6607A0D7DC
3851A72C3E0D4B869FB84BDB7E5464F6C8888319419AD0275CB0459C118252A2
3546EF4F37D9191D9C2D513B40ED1694EF30BFFD1F0D56DA93232AEAFADAD781
25EE549CF55F73BFA4BDEE883506CEC4E7C3E63CF4617E0C60C624ED971985B9
FCAFBC38135288B32AA5B05F35727BA704AEC2B7534AE76923C36D14F9FE8307
8C0EF4F2964CF570ADFF284B85CEBC205FCCD1A69C81621E58EB24003E4410E6
06D3966E3AB9F2CFB10E3DAADE0DE1C8AB9BE1F33921912308EE915FE05D3304
5CBFF6389876941D51720E5F6AFF28187DFC67C35757EA91CE30F65D0AC970C8
D291C80031FE13E5A12D9F6EE5AE5E89C541D56A3754E39B380DF4659E33C488
375FABDE1006E3D3B4E46E8ACD2DA44D0924D513648C841C205A59C8D74928A3
86FE671B1FC11C9598FA949E6D09C83B08742CC6738E39FA02CC1B96ADD64F49
F46B2C9CAAAED8119A2733CFC645A619BC423F7442B1F1C0D8EDF17572B408B3
EDEBB7657AA7D5FA64AEE3B225DED7E13C0C3C3AB1F0F192D6F1353737415242
6355AF936438B219C5E2D9538663E6BC89716577D1CFB71D37D44EE9FB383C13
0BC2461DB7839361A1FB3F72326003802883CD5937FB915F2626E23C0E2B86F6
354EFD038B66C6CE38A97E5E79531115AD54BC2F6BD2E67DB56CFE2D79C28CFB
8C9434BE19BD958CF5733C7DB75F030D539F5A13E32760ED7D2C074997AF1FFC
F6EFCB3A63B40B24013B718F41E71FFE0FC9605BDE315375F4EECE5A774EE329
BCC3DDA616E5A6C2DFE33797676042C994F360DBB0F581FAA8954FAB4B4F7A01
2912D3F70A7523E6B1CB0175DFD03E73FC22FB16ADE371092995784B964CE458
9563210456BC608432E20E45CC56343E3D2AACF07AFF67A964E7CDC3794E1D22
C34592289E82F9CA60B4DBBF3FDC49AE08003F416EFE2CD4456DCB71A60908A2
211AE0E9313F4B61891BDD926E05A517978A13D9B3A0E8776E4BAD98BBC8D28F
4F90572C7CA581759DB3E69F98048DDC591B28CA1A996D29B4A70F4A53752538
1E511769FC788F0D58ED841C707327B7D57C1107EB33E6C92D86370D5C0EF783
F762DB2BA53217BCCFDE3C61BAA5CCDB727B872524A880B06EC053D712A352F8
6523E2B7A5F1694D41D5D5849EBD6FC1E3CB014785CBF6AE855CB6FCAC5C084D
DF947209337EA5B398E2835682B01C2B174799949C73DFCF7FAB6CFCCFDA4317
12371CF4E9A7760B1B2C2A8EB62AF0B093B14CD9D3FF1E7F2B8F8E0F26AE6064
37A849A6626B865FE01CEBB8AFBEBEA33B8D30312048BA7302959A938F230FAC
FE83018EB513BA9F8E06ED5CBE949EEFDF0D51B2F874A2E19561DEE33CAEAA5E
17C8FCCE805938270AB421E100BE245688658628DBB7FBCF60F155E3D2F23B26
AB4E275CD592F9556FCF0DAC9D8A4CCAF794F932DC9F9756AB4CF8D10CAE3C42
254FA97F9BE204681EF627A2AB99397C81FD18FCFCB1768A18F5ADAFBC8F506B
CC9A4B559380321E6053A3C983853C35C17A13459F2A939135C9AA3D95BB4CA5
D131D18CE08FA542FC652555ED5FB32E8FD35ABC73DC6ECD4B2C973FA5264B62
77B58DBDA3F528516BF6F3EB55DB14D5999DFA67E8703CD062A33B19E542AD66
2D6BD12147121E8E2FF66653B02500C2D82DC1358CF9274A1A96F5DEB604EC33
988701ADD7ABE4584AC0079B4CCE75DE4ADFB2C258B6D64A2C4174AFA088BBA6
CB2830B3817F4C86FB91549A1F99C8356460D287E65B2DDEFCFABADA12E05917
EA815D94BE7778936B70F14ACBC51C56EF4C80AB929A12C1C5D7D5C36F85D164
182EB00CACFC585CCC85FE892CB89FBA352112F904163E6740D42167616E5CDF
A9BF6E42EF4559C2155E58FA101912B19A34B539D95F7891661B722A021A2D49
4447CC7C79746616D5FD377529CF100B77AA4C087238C5C9260593D016F19EAF
F8B17B3AF42492F7658738D0AFE7D585F6718E89436D7B71E52E513A5C3071D2
04F98F1A4324C7E9DE1E6522FC392F46B6BB94027D13FCA55C54B4E16253F898
C0915BB7CC83C2E05385A082908F76951457552073B5840766B01BB8F1D3CCD9
042B1240D3E464E874E4A24E229AF6ECF1BD059F76EF585B8CD1831A541F5D7F
510F82355C2A572579C4A21348225C7190D42E0947314DEE4B28C7112C9A025B
6EE3B121BD2B267CDD32121F148077955B8B1276BCE050AB47A610706DC24638
AC1C0D9998208FB77A6480E9774DD2EBFECAB2F1BF9D15D1CC26E18DCFE46D16
3B1E89AB5F7B96FDA0F401034AA3CFB0B1C47446E3CB9C454EDA0526DBBE8E08
94C42667D67649FF4874395B824051900BE95F56144E6E528E55933BF01C0E31
E1A6A1CAA3A59B527EBC7A4CAA2DC543CE420DFBEFAD06F043914F94135F9F38
141B8B49A7A3FD010625FC5B0E17CD07C713A3CCE7D26B422E83C6E32F7AC88B
A4381C92831CA2B83644AD45C93920E53A3D6AEF2574ACB710D51E64D053408E
2D9A2FD55335982463A19D322F686027DD55F4D3151C4A068696C63FEAE8FC95
B5056D55A3E56C4B5AB32ADB28D145BEA2495BDFF0AC98FB5260D6CA75D5A25F
3767DDF10E0EDDF48A5182FD2FCB1B50363E452DC464A72D3548C5EA90933ECE
275D9792CF709FFC1EEC83BB56758748F98B94F85B4CB6E865F44580845F0FB6
A8AF34136E0DE6756CF7C2011D60A37FBF08CF775DE1403EDCDDF342E184BCC2
4B397B2F6C34F3EFAC0F3299B3628E247CF975F242DA27E8824FF18BD37D29A3
BCFCE07BD03F4DC632CF1CCA7A6E005DCFDC0DBE8441DFC3307E856196F6FC61
B7C9EE62761A23F2DC296595E1143CE6B7CDE475BB670CA67973FEFC3C361BEC
327DB9D79E66256584EE51EAF284D759A019A246EFDDB2CDEA49E164A67B93CB
7993DCA62A7512D5D95852E53658171E409F5DE92439DE7BB6EC207B728CC231
836FBDDE3EA443D87E143825AEB930045F07CD70E12E194490A4C139E26B05CE
562A7F1F218C563F6F1AEA9D81A9461299F1787ECC3F227BD254633BBD9479B5
611209D39D3828A3D94191792FEEA8C6A84E20C3D0C2636FD84038EF3B8F2CC6
3DDC2FBC413C661462D0BDCC2A72DE0E9B44C2E052517CEB716154E39C02B4C1
C52298FEC6D54C7FDCA905CF4E3BCBAF6CC5D3794798443C3CCD7A0EA1160644
42141A46A5447185CD14581A0301B1BA348076F8E63D54D2A8E127EB161E29D0
433D1F9AECDA0F331A61E4BD3016BB1D507199E063C8E0C7B537D2E4EEFD5AE3
4AB7B39A19492921193B4E0AA8AB122325D807C81395F39D9A453413927CF205
15FD380773AC3BCB388D75398305F6D366FAB9E7799C5D4B1523B2584852F5DB
D3B1DBA7AFD0141326A5EA693F114531B6AD363602199A331285826BAEE95C53
05E5D9D60D857A2CB416B920AEE2004FAD26ADDA935A63FA07B7970D1766725C
F7BD116ACF671DF047F8EDBDA26B381DBA56B970B21DDD1DDB5B6609169D3B1D
3EB480FE31E104A8A63B070D067F8F5DF8B4F1FB6EE904237D967EC2C87FD59B
F4A29FC4F42A9F40736746671DBEF3A4DA04A63EAE001D31120724D06CDBA6FB
E10EED9B181BCF8461B3D81A1F402911CAB49534A03B870A1F071B532146DC44
015E2266FC409A7B3713728AD693571E553F4927ACE6A3111D34DB5BF97339DE
7372B3F2652453807BE07F2580B926CEE7594EDF3A75C620A66A59486069CA59
FC69E2F77DA2662DBE191BBA498E140D945D141C28EC453E411C9397BD4DEC5A
66DC2924491C3827D0C65B19A8F2CB34F0BAAC05314F77EB476E29B41AD67BF8
EB582F49EE66A805157713B6E0A5C4B4760EB88A3800038B447BF34DC891DE96
16AA7847913459BFCD94FCBF3AEE99E1E1F430F37CA325D9F5198AE00EFB5043
4006E2714ABD76BB8359A3DC1EAF0F1DCFFB69538FE092FF221F3A8B97C40457
B09A1F5CD6EC2FD3B8D257372A1993EC5BA6D5FADAD27DE4A29BE18BD5104F83
1ECBA1C6E909E883F306CBF79B11B270CA73E177D6279ABD11B092EE288F4CF0
58A0D4B189F8BBEDA62C59CE1A8CE50A9F503A7EADCF5EA73EA20F53134D0420
A60F43BF734B16AB45A5D341D1BA054D2895149FBC463679A22F07B7954E593E
15CA50F009E610CBF667B8F2F89F8C305D4F327AEFFE1C626089978C8CC91983
A59E32337971318AFD9C78AC2A3A8E9A0D0F790D883B17340EC5569B2DB12891
97D6F13537374152426355AF936438B3C13448AA53B9B10CD190AC18BBCF4896
0674A0552A601AA5B3706DD4615347D646C2FEC7312B819AA54CFFFA83E84F9E
953A9611CC822B026F99EABE7C904D582059B0C210A2AF66DA4E88A6ED1D4681
2D934D8158AD4066DCA531A7E3F14F35ABC39591932DA5AC81BCB5B6FDE973B1
A8A9127874891777A489996A44B5A21D72D293D19F9C0A6942428BE969723FCC
AB14422C329AE0BA43FE1347D668B2CED9654D3D1838A2837E1F94DE9ED26FD0
F1E4F48A3F0F223E6A0CC26F28210924A7EE8CF146CA8985E1FE9D3417677E9C
4D83910936EE9A60B370DFB938B3B3DCCA756B93B0EE4B498DA00E281EE72059
DBBDAAFC00982F244D2A97ECE636E064A02605653B69A0A256ED3D434667F08C
DE0A333E995FD0397533577A30F19998970A7CA69AB97673FD52ABA1ABBCD448
8E89DB7DABE13B44CBBD7EFAA40F133E5B492EFFB7460F3757D26B38140D6038
39C6627A83326AEA0AD2235673EB2C312665A8DF27934CCA1C34AD5AAC3C7B8A
056E9B898869BA9FA2505EC3CA2A5C3453BDF12A3CF27F367E0F9188C537703C
BFAF5D46A69D1C4BB5D8A461FDE8E7356C8F44DA9A52AB88919368F8AB9F1BFD
D7D383AC6D70EABB2034D3DC6C3925BEC76729E974CB7CFAD78719BAD6FF4CD8
693A325BAA69F1B5CCA625024471C292B4FB5440DDC94E888AC8539B35D00004
B1283F6DA82821ED0077F1BAFD092E0A876FDC64C1D3D2529A4F261AD82C4B14
F6711B0FC094122A1F53C6CAEB5D464D283F12E8BD075A353118A7C04EB2B195
D8F89CCDBA555D77BFB4F5667D78046F9618F9B3E94946BCDBFFCB3B7202952C
4F82B2FF5A30FFA8956A5771E8D325E4F0660D695304F2C25CB041FB3E06790D
B1D88A78AE361A39672291AA1C7D161C21981161813E5F91B8A3AE1101D011D4
1BA24544943A9209F3CB6DC1BCFF81DF2A208836B997BA00138453AC833F4251
E0A6FA28D02024F040AF365D3C71B5681C392C79F555961A47656DD07EB15848
9D162419E43498CB49A2A032F442DCAB7184F28EF6B8E09A092BB0354C79172D
AB427ED4553C7BD5364B1D5B98AD4FD719A38F17FDC7961AD86A0F83CD9370E5
84DD581E2C7A9E6DCCA490B18E3D34D4EE88681A3A94B55740E4A9DEE1596B69
55967815CA48217EF03C9A8B91B9057A7D64748E5877674ACD1A14C0755F1986
10721DD80A69B38E393AC2C8110004057BF9D9AA9680FC24408A49522F754CBC
581869A7A980EE3EBC3198DC157AAED8B8D8D9C3EB681EE8A6076FE882420C7F
F8AE88D8AF9B7D2DC4F5579E520C411070D1229D99F8286A5D4603C39E8716E2
5FEDEF8FC4C3E125857FBF1AE4F06EC17CAEFE8DBF991398286F766823166D10
44A45727AD637C4D7586E561093E310562A69D0D4AE255AF31114E40ECAF8EF6
18AF1B571ABB556C0ACD8EA75963867D844A052AE3CCA3F0C3D790FC1FBC7362
4EBEFF3CE8FA7DB879F824738B6859AD04C02B5168A341869171F44A2A99BE67
7AABFE10B91FCFFC5A1FE2F6E50D3585C98C3FFAD4B3122CC9594526FBA26021
B11732DA91BAE681224CE58381EF6581C6AD598630A9DAE214BDA6CA97DEC6FE
4167A88E85A8316BD7314EAC65EE85A2D8EEC6E7AFC99314FCB86753B098EDA9
68918CBCF76A719F402EDAB4BCBFEAD8F7A080F28CAB1838CA3C3EE87B3B7DA0
659DC9016C3411A16565487B4C9C3D43F758128E2C348C05A90B453C690DE572
3CBEC40CC7CD343C79049A1AEF9F795585C5D4E0167AF714716F35688D948524
3F1DB3B7555E94D8B34091E4E02B8A0F74F17B39B75DA610408294D674010D53
873DBF392CB9A331281FC1B6246AF2A8AEA26D2EC3E9844339D836F50EAF88C4
349C645622EF90F4447C5B97BD397D5A8151800806C5BCC21AECDD19AEBBA3F2
E0D2CD9545930CCF3876ACE9A3DD3EEF04347ED9777AB5A7AD1096C176FD359E
BB5DC69D42ED61C7CE31A3F09F0CE9969EE106D388A9C92DF2FD4E415F555C50
31B53EC2563BC879D644E493CAE8C49A47B36F38DF9D24FAF30FE3B95A430DDE
65A734641DB3BADFFE4524CFD78B65A01DB94CF0042072EC5DD355C66956BA3C
F3345F67B0D5E43DB022CD833CA64B0AC1C23C020D21F725290BED722E7920BC
29CA39CAA9AB2B77590AC862FA36FDA92E736F3FE55A2E8154B2ECD15AAFE3CE
A7EAE2B54965D05F60F6626B588C3F480060FFE643EC5CFCAFEC4F5B604DD0DF
383B1343743BF96D3A421D3AF78EAD13883DF0CF798AF37B206F74955611AE28
CC6053B8A76E30941D850C1D9DADC48D6405B5DE1F9CD190AE6FFF5DB81E2F5D
B7943CCCD849DDFDEFA217637FDA6A1D3A510303D3371BDAC81907E89A67D743
27F2C26D5C7935F35CA0EC6C204EFF28F5E53EAB9B3801CBF7232663B8C2C299
E75CB49E9D9B5E0EC6F3230F18A16065B43DF86EBB9F17FDFFF87AFE1B6E2025
2B8A67BCB3D7E1CF4E32FFAC5F47E8C79CD270047DA6C19E0B2844E693C91D5C
03289395DC77C32121BC59D4E70D356D553A8D26EFF4B7C5241E9776D0AD20E0
DC9B1F3BE6298041DB04FDE5FAB923BCC9F85331904A286658B5C95E3A0647B8
FF50871833F5F676E4C893E8647CD71DB838F496920F59A475A4233D0E49ED35
639E59DAD26FC677C8189CC9053C4D03063A5A04826A034A3787A203CD71D4D1
0CAC8FA896C4BB2A3D8CDC266A96DB64771BA50C484195B041943DFC827C89BC
CA36466539315C8A8B59C5E43FB70ACF07F030EEA111DE4A68A28B6A8A8B0922
8B86A5F421437F3AFD3838EDBF27180B1A1C672639B2556E75A10456B1BD9A76
B788F4E6A347569DBDFFA0BE691EF6387599C8D82BFDB1BBFFDE7456A617C36A
CC309EBDE3E29DAC0A028E22AB645AA232FCD8AEAAF8E5FC74862F18C080C85D
357CB43F9EAC724026E8D71A621D3F347385C56CBA482A11E75AF224BFF2388C
F03565D23A89C2C06EE7855D19BED879B2B922E21F49FD75F083B75CD8064C94
F2355F19675D20228ABEC2AFBCAC569F5833F7C55C9A8BF1C41A4FDB7F186BAF
F053E5B422EFBCBD6356F3A4E7E631DF4061D771AE983A1829B8210448500952
BA5A9F2FA9ACA7B0F59312906FB1721E605471967C1BEBB4169A51053D7751D9
30E8CE2E65A30DD07C1AC3143FE31B67F81C83F377C210326A5D4238B50A1A8E
27AEF1847073A21B45180480D5AB50C99B34F273CABD5EA6E7943FAC143FB63B
E36893A64392E33309EA7163A17C4A5B0E1A87877499BFBA5BBB3C9145811071
4790583141802847A3C98F9BAD96322D770BB742A27EE325EA0A5C41CEAF86CB
F26CF5957B980E3055433335838573DA94F0330F06E8590EC906C5B90F170230
897AF507FA35E7D98DDE2C3179221141BC39B204ECA4A58121A1398C68F2BD24
FB6727774538BAFC09A7397FD6EFA7B9195DA428F0C82952DF65C94759AEBF5E
021E92CB550EBEC3F53D30D190F079D4B7329FE5D4471C7F72146487CF5394BF
3261AB1A3DAA92788C133038320F0C3C0F3892ED74C8941CAF192EDAAD4A1AB6
177C8D0BB6611132E2702482E91DD7E06DF2F5AAD05E01EC6412A8E4A08FA2A8
0DD1794BF580512F50CCCA83FF4975A97B1AF0AE37E600DB0CA7E0BE8AECFD63
F6B4A078D95FB18F5E062331B39F5DA97AB8D9F29B662310B3E9ECA01E06C1A8
03126EB02279571A9D2E5D842910996BC4519905B63F394CBF6C8F1BD147512A
55A9C6756D6ACA6A7AFC1D357F72F74DF89DF32045E18E56BC33528EB6786D25
328959A665356A339B29D314CBB80658A5B295C40C75532B1502B19489C1821F
2AA34068FDAB5313A857BD3B8B48C98FBE8987AC3C38A23C57C89BF20CC20006
89D3E32395188C1567AA01C41188B52C306DE52BC9D3BD7580683555C4866A25
3C3767A5C901CA953A3B3888C36A265ACE7760471CBDCC1E30D6474C674B3687
5EAB8679B7DB7A1B5C10D3414565B9089FE42F78175C2D8B0C42F8F5CA4DAF89
D1B86D19BFA476B388819E87F39CDB447277D2B36434CCCFC4049D783E4D8D05
507AF6FA3DFD152F0AFCD31037DE72B92FB226FF113AF7333AF9029D43A6FEAF
3C93E7B5DB5111CEE746484095BC3CF276125634C395BA5ACAF38938DD14991B
1246D20D992807B472663239AF213629852E0A232CEC067CA45285B38384DD8C
EAC596C70650009197BC0980982803F5FD813765AA8D27645405F57D3C24EAA7
96072A70CB9EA928CC577053B5B50FDF929638C88FEA367ED70901D3917075DE
B4791B33285BBDE00130931C3A6BC7BA35FB22445F0C1EB19767B9EAB1DC9C50
F6CFFE7A455DA8C9313766E752F7DDC036F4E887FD130C54E4BAD36949118E81
254B05F7CD75C9EABA0960C30383D3729454995FC149FEE191CB826216D8D48D
59E546339B44F2961A5FFCA2D1C223B423D2D206CFC0D467BB7D34AAC00C0634
826A9FF80E1F22209FC12AA315F61A1B70E97ACD3D00BCE353C25446E43D64A8
3A40E7FC60D8297B67919FA60B23DF3BAC71B5FC3F76BDFA7BBE6915222A8544
0F07361A58DC22E2203BF9238887438C11CBDC801E2D80C477B96FB77AC3C781
9A59D8E31E50FD2986EDD53B628746AC7F694FAA622FAE86091CB6937E760A3D
D6A1267CA98A19561178E8587FA6882F0988EA595FE323644E80BBA4F629CEAE
41BD035303BFFA114935C5C2599B86B666C14EA367708E892FF67F9A9D973617
B266A2DE4A45759CADCCC5C9DF34E357F644E0EBED6BFC864082AEBF34B779B2
F24639A8EF2E920CC19C746684444A99FE4CE343AA9F5E16183E99D03DDF1B56
CD6B49464889DA3FC8C58045825B6FDB13441A97C0F7B03B86EC21C38BCD8413
B0BF246EF102364072E40F9EE426D89AFE01A3BFB96034E33212E2A14E0852C2
18947FB42C61B1030F215FAC34916ABE2A29F135FB77AD63853C32F195007A4B
742F65C89DAB27F5A946CE88697B3455AFF5E5493AE41FFF868F5E3DD16DDFD4
6CA2B39844458D697D6D3004E4988051AA2496C0A6C275766C16A9BF578E7AE2
95B5295AAAC470CD2147A6364526F04D9B796C50C92FAE59D464AEA3F54609C8
384B3C55650ADAFB3105B338D87C1D775FEB60DA51E97E786A327D8D72C5CAD9
7AE95E9DB78A4FD99CD88B737C3D087300792BB1400946F3E9B88DCD4D68E6F4
2AFC83439ED7BE4D3DA1BAD59AED672A1EF843DD4A8AE971268029A9C70138ED
7758E32D529EAEC361398E73DDAE7A3F79A89A36DE569C1BFFB832302F86BA0D
E0D755FAA961992F209FA94E479FC5A2DFCE5180E0C22B80EAC9879280AE1517
AEF3C638D2F6BA9BEFFE3AD2EE6AAFE30F8CAB0A7F5C459F170FB19D5A5934B5
85D5BACF60F1E88F2E5ACC899E8108A79D4E1D2BE9D371
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (main_resultat_latex.dvi)
@start /Fa 154[39 101[{}1 83.022 /CMMI10 rf /Fb 161[42
94[{}1 83.022 /CMR10 rf /Fc 134[44 44 60 1[46 32 33 33
1[46 42 46 69 23 1[25 23 46 42 25 37 46 37 46 42 7[62
4[60 46 1[65 56 1[62 76 5[65 54 2[60 5[65 2[23 42 42
42 42 42 42 42 42 42 42 1[23 8[69 8[46 28[{ T1Encoding ReEncodeFont }47
83.022 /SFRM1000 rf /Fd 168[136 1[101 91 73 3[99 103
1[79 1[68 4[86 101 95 93 14[66 66 66 49[{ T1Encoding ReEncodeFont }15
119.552 /SFBX1440 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [ /Producer (dvips + Distiller) /Title () /Subject () /Creator
(LaTeX with hyperref package) /Author () /Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 142 -8
a
SDict begin H.S end
 142 -8 a 0 TeXcolorgray Black 142 -8 a
SDict begin H.R end
 142 -8 a 142
-8 a
SDict begin [ /View [/XYZ H.V] /Dest (page.1) cvn /DEST pdfmark end
 142 -8 a 0 TeXcolorgray Black 0 TeXcolorgray 150
307 a
SDict begin [ /PageMode /UseOutlines /Page 1 /View [/Fit] /DOCVIEW
pdfmark end
 150 307 a 150 307 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 150 307 a 150 307 a
SDict begin H.S end
 150 307
a 150 307 a
SDict begin 12 H.A end
 150 307 a 150 307 a
SDict begin [ /View [/XYZ H.V] /Dest (Doc-Start) cvn /DEST pdfmark
end
 150 307 a 83 x Fd(SUBJECT)45
b(1)e(OLD)150 482 y
SDict begin H.S end
 150 482 a 150 482 a
SDict begin 12 H.A end
 150 482 a 150
482 a
SDict begin [ /View [/XYZ H.V] /Dest (section*.1) cvn /DEST pdfmark
end
 150 482 a 275 593 a Fc(Spatial)27 b(\034lter)g(:)h(Mean)f(of)h(c)
n(hannels)150 693 y(T)-7 b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(No)150
792 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g(detected)h(as)f
(wrong)g(:)150 892 y(20.0)150 992 y(P)n(ercen)n(tage)f(of)i(signals)f
(wrong)g(detected)h(as)f(correct)g(:)150 1091 y(20.0)150
1191 y(T)-7 b(able)27 b(of)h(results)f(:)p 150 1203 1279
4 v 148 1302 4 100 v 580 1302 V 635 1272 a Fb(^)-46 b
Fa(e)28 b Fc(=)f(juste)p 1011 1302 V 103 w Fb(^)-45 b
Fa(e)27 b Fc(=)g(faux)p 1426 1302 V 150 1305 1279 4 v
148 1405 4 100 v 200 1375 a Fa(e)g Fc(=)g(juste)p 580
1405 V 190 w(45\045)p 1011 1405 V 271 w(55\045)p 1426
1405 V 150 1408 1279 4 v 148 1508 4 100 v 208 1478 a
Fa(e)g Fc(=)h(faux)p 580 1508 V 197 w(50\045)p 1011 1508
V 271 w(50\045)p 1426 1508 V 150 1511 1279 4 v 150 1577
a(Global)f(p)r(ercen)n(tage)f(of)i(resp)r(onses)e(:)i(34.2)150
1676 y(P)n(ercen)n(tage)e(of)i(correct)e(resp)r(onses)g(:)i(34.4)150
1776 y(P)n(ercen)n(tage)e(of)i(wrong)e(resp)r(onses)g(:)i(33.3)150
1876 y(Qualit)n(y)f(criterion)f(:)i(43.1)275 2086 y(Spatial)f(\034lter)
g(:)h(CSP)150 2186 y(T)-7 b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(No)
150 2286 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g(detected)h
(as)f(wrong)g(:)150 2385 y(20.0)150 2485 y(P)n(ercen)n(tage)f(of)i
(signals)f(wrong)g(detected)h(as)f(correct)g(:)150 2584
y(20.0)150 2684 y(T)-7 b(able)27 b(of)h(results)f(:)p
150 2696 V 148 2795 4 100 v 580 2795 V 635 2765 a Fb(^)-46
b Fa(e)28 b Fc(=)f(juste)p 1011 2795 V 103 w Fb(^)-45
b Fa(e)27 b Fc(=)g(faux)p 1426 2795 V 150 2799 1279 4
v 148 2898 4 100 v 200 2868 a Fa(e)g Fc(=)g(juste)p 580
2898 V 190 w(15\045)p 1011 2898 V 271 w(85\045)p 1426
2898 V 150 2902 1279 4 v 148 3001 4 100 v 208 2971 a
Fa(e)g Fc(=)h(faux)p 580 3001 V 197 w(38\045)p 1011 3001
V 271 w(62\045)p 1426 3001 V 150 3005 1279 4 v 150 3070
a(Global)f(p)r(ercen)n(tage)f(of)i(resp)r(onses)e(:)i(27.5)150
3170 y(P)n(ercen)n(tage)e(of)i(correct)e(resp)r(onses)g(:)i(22.2)150
3269 y(P)n(ercen)n(tage)e(of)i(wrong)e(resp)r(onses)g(:)i(43.3)150
3369 y(Qualit)n(y)f(criterion)f(:)i(34.7)275 3579 y(Spatial)f(\034lter)
g(:)h(Fisher)150 3679 y(T)-7 b(emp)r(oral)27 b(readjustmen)n(t)g(:)h
(No)150 3779 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g(detected)
h(as)f(wrong)g(:)150 3878 y(20.0)150 3978 y(P)n(ercen)n(tage)f(of)i
(signals)f(wrong)g(detected)h(as)f(correct)g(:)150 4078
y(20.0)150 4177 y(T)-7 b(able)27 b(of)h(results)f(:)p
150 4189 V 148 4288 4 100 v 580 4288 V 635 4259 a Fb(^)-46
b Fa(e)28 b Fc(=)f(juste)p 1011 4288 V 103 w Fb(^)-45
b Fa(e)27 b Fc(=)g(faux)p 1426 4288 V 150 4292 1279 4
v 148 4391 4 100 v 200 4362 a Fa(e)g Fc(=)g(juste)p 580
4391 V 190 w(66\045)p 1011 4391 V 271 w(34\045)p 1426
4391 V 150 4395 1279 4 v 148 4494 4 100 v 208 4464 a
Fa(e)g Fc(=)h(faux)p 580 4494 V 197 w(42\045)p 1011 4494
V 271 w(58\045)p 1426 4494 V 150 4498 1279 4 v 150 4563
a(Global)f(p)r(ercen)n(tage)f(of)i(resp)r(onses)e(:)i(46.7)150
4663 y(P)n(ercen)n(tage)e(of)i(correct)e(resp)r(onses)g(:)i(48.9)150
4762 y(P)n(ercen)n(tage)e(of)i(wrong)e(resp)r(onses)g(:)i(40.0)150
4862 y(Qualit)n(y)f(criterion)f(:)i(57.0)275 5073 y(Spatial)f(\034lter)
g(:)h(Mean)f(of)h(c)n(hannels)150 5172 y(T)-7 b(emp)r(oral)27
b(readjustmen)n(t)g(:)h(Y)-7 b(es)150 5272 y(P)n(ercen)n(tage)19
b(of)i(signals)f(correct)g(detected)h(as)f(wrong)g(:)150
5372 y(20.0)150 5471 y(P)n(ercen)n(tage)f(of)i(signals)f(wrong)g
(detected)h(as)f(correct)g(:)150 5571 y(20.0)150 5670
y(T)-7 b(able)27 b(of)h(results)f(:)p 0 TeXcolorgray
0 TeXcolorgray 1954 311 V 1952 410 4 100 v 2384 410 V
2439 380 a Fb(^)-46 b Fa(e)28 b Fc(=)f(juste)p 2815 410
V 103 w Fb(^)-45 b Fa(e)27 b Fc(=)g(faux)p 3230 410 V
1954 413 1279 4 v 1952 513 4 100 v 2004 483 a Fa(e)g
Fc(=)g(juste)p 2384 513 V 190 w(41\045)p 2815 513 V 271
w(59\045)p 3230 513 V 1954 516 1279 4 v 1952 616 4 100
v 2012 586 a Fa(e)g Fc(=)h(faux)p 2384 616 V 197 w(50\045)p
2815 616 V 271 w(50\045)p 3230 616 V 1954 619 1279 4
v 1954 685 a(Global)f(p)r(ercen)n(tage)f(of)i(resp)r(onses)e(:)i(32.5)
1954 784 y(P)n(ercen)n(tage)e(of)i(correct)e(resp)r(onses)g(:)i(32.2)
1954 884 y(P)n(ercen)n(tage)e(of)i(wrong)e(resp)r(onses)g(:)i(33.3)1954
984 y(Qualit)n(y)f(criterion)f(:)i(41.3)2079 1183 y(Spatial)f(\034lter)
g(:)h(CSP)1954 1283 y(T)-7 b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(Y)-7
b(es)1954 1382 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g
(detected)h(as)f(wrong)g(:)1954 1482 y(20.0)1954 1581
y(P)n(ercen)n(tage)f(of)i(signals)f(wrong)g(detected)h(as)f(correct)g
(:)1954 1681 y(20.0)1954 1781 y(T)-7 b(able)27 b(of)h(results)f(:)p
1954 1792 V 1952 1892 4 100 v 2384 1892 V 2439 1862 a
Fb(^)-46 b Fa(e)28 b Fc(=)f(juste)p 2815 1892 V 103 w
Fb(^)-45 b Fa(e)27 b Fc(=)g(faux)p 3230 1892 V 1954 1895
1279 4 v 1952 1995 4 100 v 2004 1965 a Fa(e)g Fc(=)g(juste)p
2384 1995 V 211 w(6\045)p 2815 1995 V 292 w(94\045)p
3230 1995 V 1954 1998 1279 4 v 1952 2098 4 100 v 2012
2068 a Fa(e)g Fc(=)h(faux)p 2384 2098 V 197 w(30\045)p
2815 2098 V 271 w(70\045)p 3230 2098 V 1954 2101 1279
4 v 1954 2167 a(Global)f(p)r(ercen)n(tage)f(of)i(resp)r(onses)e(:)i
(23.3)1954 2266 y(P)n(ercen)n(tage)e(of)i(correct)e(resp)r(onses)g(:)i
(20.0)1954 2366 y(P)n(ercen)n(tage)e(of)i(wrong)e(resp)r(onses)g(:)i
(33.3)1954 2466 y(Qualit)n(y)f(criterion)f(:)i(33.0)2079
2665 y(Spatial)f(\034lter)g(:)h(Fisher)1954 2764 y(T)-7
b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(Y)-7 b(es)1954
2864 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g(detected)h(as)f
(wrong)g(:)1954 2964 y(20.0)1954 3063 y(P)n(ercen)n(tage)f(of)i
(signals)f(wrong)g(detected)h(as)f(correct)g(:)1954 3163
y(20.0)1954 3263 y(T)-7 b(able)27 b(of)h(results)f(:)p
1954 3274 V 1952 3374 4 100 v 2384 3374 V 2439 3344 a
Fb(^)-46 b Fa(e)28 b Fc(=)f(juste)p 2815 3374 V 103 w
Fb(^)-45 b Fa(e)27 b Fc(=)g(faux)p 3230 3374 V 1954 3377
1279 4 v 1952 3477 4 100 v 2004 3447 a Fa(e)g Fc(=)g(juste)p
2384 3477 V 190 w(70\045)p 2815 3477 V 271 w(30\045)p
3230 3477 V 1954 3480 1279 4 v 1952 3580 4 100 v 2012
3550 a Fa(e)g Fc(=)h(faux)p 2384 3580 V 197 w(24\045)p
2815 3580 V 271 w(76\045)p 3230 3580 V 1954 3583 1279
4 v 1954 3648 a(Global)f(p)r(ercen)n(tage)f(of)i(resp)r(onses)e(:)i
(58.3)1954 3748 y(P)n(ercen)n(tage)e(of)i(correct)e(resp)r(onses)g(:)i
(58.9)1954 3848 y(P)n(ercen)n(tage)e(of)i(wrong)e(resp)r(onses)g(:)i
(56.7)1954 3947 y(Qualit)n(y)f(criterion)f(:)i(68.2)p
0 TeXcolorgray 1892 5919 a(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 142
-8 a
SDict begin H.S end
 142 -8 a 0 TeXcolorgray 0 TeXcolorgray 142 -8 a
SDict begin H.R end

142 -8 a 142 -8 a
SDict begin [ /View [/XYZ H.V] /Dest (page.2) cvn /DEST pdfmark end
 142 -8 a 0 TeXcolorgray 0 TeXcolorgray
150 390 a Fd(SUBJECT)45 b(1)e(NEW)150 482 y
SDict begin H.S end
 150 482 a
150 482 a
SDict begin 12 H.A end
 150 482 a 150 482 a
SDict begin [ /View [/XYZ H.V] /Dest (section*.2) cvn /DEST pdfmark
end
 150 482 a 275 593 a Fc(Spatial)27
b(\034lter)g(:)h(Mean)f(of)h(c)n(hannels)150 693 y(T)-7
b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(No)150 792 y(P)n(ercen)n(tage)
19 b(of)i(signals)f(correct)g(detected)h(as)f(wrong)g(:)150
892 y(20.0)150 992 y(P)n(ercen)n(tage)f(of)i(signals)f(wrong)g
(detected)h(as)f(correct)g(:)150 1091 y(20.0)150 1191
y(T)-7 b(able)27 b(of)h(results)f(:)p 150 1203 1279 4
v 148 1302 4 100 v 580 1302 V 635 1272 a Fb(^)-46 b Fa(e)28
b Fc(=)f(juste)p 1011 1302 V 103 w Fb(^)-45 b Fa(e)27
b Fc(=)g(faux)p 1426 1302 V 150 1305 1279 4 v 148 1405
4 100 v 200 1375 a Fa(e)g Fc(=)g(juste)p 580 1405 V 190
w(65\045)p 1011 1405 V 271 w(35\045)p 1426 1405 V 150
1408 1279 4 v 148 1508 4 100 v 208 1478 a Fa(e)g Fc(=)h(faux)p
580 1508 V 197 w(26\045)p 1011 1508 V 271 w(74\045)p
1426 1508 V 150 1511 1279 4 v 150 1577 a(Global)f(p)r(ercen)n(tage)f
(of)i(resp)r(onses)e(:)i(56.7)150 1676 y(P)n(ercen)n(tage)e(of)i
(correct)e(resp)r(onses)g(:)i(54.4)150 1776 y(P)n(ercen)n(tage)e(of)i
(wrong)e(resp)r(onses)g(:)i(63.3)150 1876 y(Qualit)n(y)f(criterion)f(:)
i(65.2)275 2086 y(Spatial)f(\034lter)g(:)h(CSP)150 2186
y(T)-7 b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(No)150
2286 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g(detected)h(as)f
(wrong)g(:)150 2385 y(20.0)150 2485 y(P)n(ercen)n(tage)f(of)i(signals)f
(wrong)g(detected)h(as)f(correct)g(:)150 2584 y(20.0)150
2684 y(T)-7 b(able)27 b(of)h(results)f(:)p 150 2696 V
148 2795 4 100 v 580 2795 V 635 2765 a Fb(^)-46 b Fa(e)28
b Fc(=)f(juste)p 1011 2795 V 103 w Fb(^)-45 b Fa(e)27
b Fc(=)g(faux)p 1426 2795 V 150 2799 1279 4 v 148 2898
4 100 v 200 2868 a Fa(e)g Fc(=)g(juste)p 580 2898 V 190
w(73\045)p 1011 2898 V 271 w(27\045)p 1426 2898 V 150
2902 1279 4 v 148 3001 4 100 v 208 2971 a Fa(e)g Fc(=)h(faux)p
580 3001 V 197 w(28\045)p 1011 3001 V 271 w(72\045)p
1426 3001 V 150 3005 1279 4 v 150 3070 a(Global)f(p)r(ercen)n(tage)f
(of)i(resp)r(onses)e(:)i(57.5)150 3170 y(P)n(ercen)n(tage)e(of)i
(correct)e(resp)r(onses)g(:)i(56.7)150 3269 y(P)n(ercen)n(tage)e(of)i
(wrong)e(resp)r(onses)g(:)i(60.0)150 3369 y(Qualit)n(y)f(criterion)f(:)
i(67.4)275 3579 y(Spatial)f(\034lter)g(:)h(Fisher)150
3679 y(T)-7 b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(No)150
3779 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g(detected)h(as)f
(wrong)g(:)150 3878 y(20.0)150 3978 y(P)n(ercen)n(tage)f(of)i(signals)f
(wrong)g(detected)h(as)f(correct)g(:)150 4078 y(20.0)150
4177 y(T)-7 b(able)27 b(of)h(results)f(:)p 150 4189 V
148 4288 4 100 v 580 4288 V 635 4259 a Fb(^)-46 b Fa(e)28
b Fc(=)f(juste)p 1011 4288 V 103 w Fb(^)-45 b Fa(e)27
b Fc(=)g(faux)p 1426 4288 V 150 4292 1279 4 v 148 4391
4 100 v 200 4362 a Fa(e)g Fc(=)g(juste)p 580 4391 V 190
w(56\045)p 1011 4391 V 271 w(44\045)p 1426 4391 V 150
4395 1279 4 v 148 4494 4 100 v 208 4464 a Fa(e)g Fc(=)h(faux)p
580 4494 V 197 w(24\045)p 1011 4494 V 271 w(76\045)p
1426 4494 V 150 4498 1279 4 v 150 4563 a(Global)f(p)r(ercen)n(tage)f
(of)i(resp)r(onses)e(:)i(42.5)150 4663 y(P)n(ercen)n(tage)e(of)i
(correct)e(resp)r(onses)g(:)i(37.8)150 4762 y(P)n(ercen)n(tage)e(of)i
(wrong)e(resp)r(onses)g(:)i(56.7)150 4862 y(Qualit)n(y)f(criterion)f(:)
i(58.3)275 5073 y(Spatial)f(\034lter)g(:)h(Mean)f(of)h(c)n(hannels)150
5172 y(T)-7 b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(Y)-7
b(es)150 5272 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g
(detected)h(as)f(wrong)g(:)150 5372 y(20.0)150 5471 y(P)n(ercen)n(tage)
f(of)i(signals)f(wrong)g(detected)h(as)f(correct)g(:)150
5571 y(20.0)150 5670 y(T)-7 b(able)27 b(of)h(results)f(:)p
0 TeXcolorgray 0 TeXcolorgray 1954 311 V 1952 410 4 100
v 2384 410 V 2439 380 a Fb(^)-46 b Fa(e)28 b Fc(=)f(juste)p
2815 410 V 103 w Fb(^)-45 b Fa(e)27 b Fc(=)g(faux)p 3230
410 V 1954 413 1279 4 v 1952 513 4 100 v 2004 483 a Fa(e)g
Fc(=)g(juste)p 2384 513 V 190 w(70\045)p 2815 513 V 271
w(30\045)p 3230 513 V 1954 516 1279 4 v 1952 616 4 100
v 2012 586 a Fa(e)g Fc(=)h(faux)p 2384 616 V 197 w(26\045)p
2815 616 V 271 w(74\045)p 3230 616 V 1954 619 1279 4
v 1954 685 a(Global)f(p)r(ercen)n(tage)f(of)i(resp)r(onses)e(:)i(55.0)
1954 784 y(P)n(ercen)n(tage)e(of)i(correct)e(resp)r(onses)g(:)i(52.2)
1954 884 y(P)n(ercen)n(tage)e(of)i(wrong)e(resp)r(onses)g(:)i(63.3)1954
984 y(Qualit)n(y)f(criterion)f(:)i(66.3)2079 1183 y(Spatial)f(\034lter)
g(:)h(CSP)1954 1283 y(T)-7 b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(Y)-7
b(es)1954 1382 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g
(detected)h(as)f(wrong)g(:)1954 1482 y(20.0)1954 1581
y(P)n(ercen)n(tage)f(of)i(signals)f(wrong)g(detected)h(as)f(correct)g
(:)1954 1681 y(20.0)1954 1781 y(T)-7 b(able)27 b(of)h(results)f(:)p
1954 1792 V 1952 1892 4 100 v 2384 1892 V 2439 1862 a
Fb(^)-46 b Fa(e)28 b Fc(=)f(juste)p 2815 1892 V 103 w
Fb(^)-45 b Fa(e)27 b Fc(=)g(faux)p 3230 1892 V 1954 1895
1279 4 v 1952 1995 4 100 v 2004 1965 a Fa(e)g Fc(=)g(juste)p
2384 1995 V 190 w(73\045)p 2815 1995 V 271 w(27\045)p
3230 1995 V 1954 1998 1279 4 v 1952 2098 4 100 v 2012
2068 a Fa(e)g Fc(=)h(faux)p 2384 2098 V 197 w(28\045)p
2815 2098 V 271 w(72\045)p 3230 2098 V 1954 2101 1279
4 v 1954 2167 a(Global)f(p)r(ercen)n(tage)f(of)i(resp)r(onses)e(:)i
(57.5)1954 2266 y(P)n(ercen)n(tage)e(of)i(correct)e(resp)r(onses)g(:)i
(56.7)1954 2366 y(P)n(ercen)n(tage)e(of)i(wrong)e(resp)r(onses)g(:)i
(60.0)1954 2466 y(Qualit)n(y)f(criterion)f(:)i(67.4)2079
2665 y(Spatial)f(\034lter)g(:)h(Fisher)1954 2764 y(T)-7
b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(Y)-7 b(es)1954
2864 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g(detected)h(as)f
(wrong)g(:)1954 2964 y(20.0)1954 3063 y(P)n(ercen)n(tage)f(of)i
(signals)f(wrong)g(detected)h(as)f(correct)g(:)1954 3163
y(20.0)1954 3263 y(T)-7 b(able)27 b(of)h(results)f(:)p
1954 3274 V 1952 3374 4 100 v 2384 3374 V 2439 3344 a
Fb(^)-46 b Fa(e)28 b Fc(=)f(juste)p 2815 3374 V 103 w
Fb(^)-45 b Fa(e)27 b Fc(=)g(faux)p 3230 3374 V 1954 3377
1279 4 v 1952 3477 4 100 v 2004 3447 a Fa(e)g Fc(=)g(juste)p
2384 3477 V 190 w(53\045)p 2815 3477 V 271 w(47\045)p
3230 3477 V 1954 3480 1279 4 v 1952 3580 4 100 v 2012
3550 a Fa(e)g Fc(=)h(faux)p 2384 3580 V 197 w(22\045)p
2815 3580 V 271 w(78\045)p 3230 3580 V 1954 3583 1279
4 v 1954 3648 a(Global)f(p)r(ercen)n(tage)f(of)i(resp)r(onses)e(:)i
(45.0)1954 3748 y(P)n(ercen)n(tage)e(of)i(correct)e(resp)r(onses)g(:)i
(40.0)1954 3848 y(P)n(ercen)n(tage)e(of)i(wrong)e(resp)r(onses)g(:)i
(60.0)1954 3947 y(Qualit)n(y)f(criterion)f(:)i(58.5)p
0 TeXcolorgray 1892 5919 a(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 142
-8 a
SDict begin H.S end
 142 -8 a 0 TeXcolorgray 0 TeXcolorgray 142 -8 a
SDict begin H.R end

142 -8 a 142 -8 a
SDict begin [ /View [/XYZ H.V] /Dest (page.3) cvn /DEST pdfmark end
 142 -8 a 0 TeXcolorgray 0 TeXcolorgray
150 390 a Fd(SUBJECT)45 b(2)e(OLD)150 482 y
SDict begin H.S end
 150 482 a
150 482 a
SDict begin 12 H.A end
 150 482 a 150 482 a
SDict begin [ /View [/XYZ H.V] /Dest (section*.3) cvn /DEST pdfmark
end
 150 482 a 275 593 a Fc(Spatial)27
b(\034lter)g(:)h(Mean)f(of)h(c)n(hannels)150 693 y(T)-7
b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(No)150 792 y(P)n(ercen)n(tage)
19 b(of)i(signals)f(correct)g(detected)h(as)f(wrong)g(:)150
892 y(20.0)150 992 y(P)n(ercen)n(tage)f(of)i(signals)f(wrong)g
(detected)h(as)f(correct)g(:)150 1091 y(20.0)150 1191
y(T)-7 b(able)27 b(of)h(results)f(:)p 150 1203 1279 4
v 148 1302 4 100 v 580 1302 V 635 1272 a Fb(^)-46 b Fa(e)28
b Fc(=)f(juste)p 1011 1302 V 103 w Fb(^)-45 b Fa(e)27
b Fc(=)g(faux)p 1426 1302 V 150 1305 1279 4 v 148 1405
4 100 v 200 1375 a Fa(e)g Fc(=)g(juste)p 580 1405 V 190
w(73\045)p 1011 1405 V 271 w(27\045)p 1426 1405 V 150
1408 1279 4 v 148 1508 4 100 v 208 1478 a Fa(e)g Fc(=)h(faux)p
580 1508 V 197 w(21\045)p 1011 1508 V 271 w(79\045)p
1426 1508 V 150 1511 1279 4 v 150 1577 a(Global)f(p)r(ercen)n(tage)f
(of)i(resp)r(onses)e(:)i(73.3)150 1676 y(P)n(ercen)n(tage)e(of)i
(correct)e(resp)r(onses)g(:)i(71.1)150 1776 y(P)n(ercen)n(tage)e(of)i
(wrong)e(resp)r(onses)g(:)i(80.0)150 1876 y(Qualit)n(y)f(criterion)f(:)
i(75.3)275 2086 y(Spatial)f(\034lter)g(:)h(CSP)150 2186
y(T)-7 b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(No)150
2286 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g(detected)h(as)f
(wrong)g(:)150 2385 y(20.0)150 2485 y(P)n(ercen)n(tage)f(of)i(signals)f
(wrong)g(detected)h(as)f(correct)g(:)150 2584 y(20.0)150
2684 y(T)-7 b(able)27 b(of)h(results)f(:)p 150 2696 V
148 2795 4 100 v 580 2795 V 635 2765 a Fb(^)-46 b Fa(e)28
b Fc(=)f(juste)p 1011 2795 V 103 w Fb(^)-45 b Fa(e)27
b Fc(=)g(faux)p 1426 2795 V 150 2799 1279 4 v 148 2898
4 100 v 200 2868 a Fa(e)g Fc(=)g(juste)p 580 2898 V 190
w(77\045)p 1011 2898 V 271 w(23\045)p 1426 2898 V 150
2902 1279 4 v 148 3001 4 100 v 208 2971 a Fa(e)g Fc(=)h(faux)p
580 3001 V 197 w(22\045)p 1011 3001 V 271 w(78\045)p
1426 3001 V 150 3005 1279 4 v 150 3070 a(Global)f(p)r(ercen)n(tage)f
(of)i(resp)r(onses)e(:)i(78.3)150 3170 y(P)n(ercen)n(tage)e(of)i
(correct)e(resp)r(onses)g(:)i(78.9)150 3269 y(P)n(ercen)n(tage)e(of)i
(wrong)e(resp)r(onses)g(:)i(76.7)150 3369 y(Qualit)n(y)f(criterion)f(:)
i(78.0)275 3579 y(Spatial)f(\034lter)g(:)h(Fisher)150
3679 y(T)-7 b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(No)150
3779 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g(detected)h(as)f
(wrong)g(:)150 3878 y(20.0)150 3978 y(P)n(ercen)n(tage)f(of)i(signals)f
(wrong)g(detected)h(as)f(correct)g(:)150 4078 y(20.0)150
4177 y(T)-7 b(able)27 b(of)h(results)f(:)p 150 4189 V
148 4288 4 100 v 580 4288 V 635 4259 a Fb(^)-46 b Fa(e)28
b Fc(=)f(juste)p 1011 4288 V 103 w Fb(^)-45 b Fa(e)27
b Fc(=)g(faux)p 1426 4288 V 150 4292 1279 4 v 148 4391
4 100 v 200 4362 a Fa(e)g Fc(=)g(juste)p 580 4391 V 190
w(74\045)p 1011 4391 V 271 w(26\045)p 1426 4391 V 150
4395 1279 4 v 148 4494 4 100 v 208 4464 a Fa(e)g Fc(=)h(faux)p
580 4494 V 197 w(21\045)p 1011 4494 V 271 w(79\045)p
1426 4494 V 150 4498 1279 4 v 150 4563 a(Global)f(p)r(ercen)n(tage)f
(of)i(resp)r(onses)e(:)i(75.0)150 4663 y(P)n(ercen)n(tage)e(of)i
(correct)e(resp)r(onses)g(:)i(73.3)150 4762 y(P)n(ercen)n(tage)e(of)i
(wrong)e(resp)r(onses)g(:)i(80.0)150 4862 y(Qualit)n(y)f(criterion)f(:)
i(76.1)275 5073 y(Spatial)f(\034lter)g(:)h(Mean)f(of)h(c)n(hannels)150
5172 y(T)-7 b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(Y)-7
b(es)150 5272 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g
(detected)h(as)f(wrong)g(:)150 5372 y(20.0)150 5471 y(P)n(ercen)n(tage)
f(of)i(signals)f(wrong)g(detected)h(as)f(correct)g(:)150
5571 y(20.0)150 5670 y(T)-7 b(able)27 b(of)h(results)f(:)p
0 TeXcolorgray 0 TeXcolorgray 1954 311 V 1952 410 4 100
v 2384 410 V 2439 380 a Fb(^)-46 b Fa(e)28 b Fc(=)f(juste)p
2815 410 V 103 w Fb(^)-45 b Fa(e)27 b Fc(=)g(faux)p 3230
410 V 1954 413 1279 4 v 1952 513 4 100 v 2004 483 a Fa(e)g
Fc(=)g(juste)p 2384 513 V 190 w(77\045)p 2815 513 V 271
w(23\045)p 3230 513 V 1954 516 1279 4 v 1952 616 4 100
v 2012 586 a Fa(e)g Fc(=)h(faux)p 2384 616 V 197 w(23\045)p
2815 616 V 271 w(77\045)p 3230 616 V 1954 619 1279 4
v 1954 685 a(Global)f(p)r(ercen)n(tage)f(of)i(resp)r(onses)e(:)i(75.8)
1954 784 y(P)n(ercen)n(tage)e(of)i(correct)e(resp)r(onses)g(:)i(76.7)
1954 884 y(P)n(ercen)n(tage)e(of)i(wrong)e(resp)r(onses)g(:)i(73.3)1954
984 y(Qualit)n(y)f(criterion)f(:)i(76.6)2079 1183 y(Spatial)f(\034lter)
g(:)h(CSP)1954 1283 y(T)-7 b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(Y)-7
b(es)1954 1382 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g
(detected)h(as)f(wrong)g(:)1954 1482 y(20.0)1954 1581
y(P)n(ercen)n(tage)f(of)i(signals)f(wrong)g(detected)h(as)f(correct)g
(:)1954 1681 y(20.0)1954 1781 y(T)-7 b(able)27 b(of)h(results)f(:)p
1954 1792 V 1952 1892 4 100 v 2384 1892 V 2439 1862 a
Fb(^)-46 b Fa(e)28 b Fc(=)f(juste)p 2815 1892 V 103 w
Fb(^)-45 b Fa(e)27 b Fc(=)g(faux)p 3230 1892 V 1954 1895
1279 4 v 1952 1995 4 100 v 2004 1965 a Fa(e)g Fc(=)g(juste)p
2384 1995 V 190 w(78\045)p 2815 1995 V 271 w(22\045)p
3230 1995 V 1954 1998 1279 4 v 1952 2098 4 100 v 2012
2068 a Fa(e)g Fc(=)h(faux)p 2384 2098 V 197 w(22\045)p
2815 2098 V 271 w(78\045)p 3230 2098 V 1954 2101 1279
4 v 1954 2167 a(Global)f(p)r(ercen)n(tage)f(of)i(resp)r(onses)e(:)i
(76.7)1954 2266 y(P)n(ercen)n(tage)e(of)i(correct)e(resp)r(onses)g(:)i
(76.7)1954 2366 y(P)n(ercen)n(tage)e(of)i(wrong)e(resp)r(onses)g(:)i
(76.7)1954 2466 y(Qualit)n(y)f(criterion)f(:)i(77.7)2079
2665 y(Spatial)f(\034lter)g(:)h(Fisher)1954 2764 y(T)-7
b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(Y)-7 b(es)1954
2864 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g(detected)h(as)f
(wrong)g(:)1954 2964 y(20.0)1954 3063 y(P)n(ercen)n(tage)f(of)i
(signals)f(wrong)g(detected)h(as)f(correct)g(:)1954 3163
y(20.0)1954 3263 y(T)-7 b(able)27 b(of)h(results)f(:)p
1954 3274 V 1952 3374 4 100 v 2384 3374 V 2439 3344 a
Fb(^)-46 b Fa(e)28 b Fc(=)f(juste)p 2815 3374 V 103 w
Fb(^)-45 b Fa(e)27 b Fc(=)g(faux)p 3230 3374 V 1954 3377
1279 4 v 1952 3477 4 100 v 2004 3447 a Fa(e)g Fc(=)g(juste)p
2384 3477 V 190 w(80\045)p 2815 3477 V 271 w(20\045)p
3230 3477 V 1954 3480 1279 4 v 1952 3580 4 100 v 2012
3550 a Fa(e)g Fc(=)h(faux)p 2384 3580 V 197 w(21\045)p
2815 3580 V 271 w(79\045)p 3230 3580 V 1954 3583 1279
4 v 1954 3648 a(Global)f(p)r(ercen)n(tage)f(of)i(resp)r(onses)e(:)i
(81.7)1954 3748 y(P)n(ercen)n(tage)e(of)i(correct)e(resp)r(onses)g(:)i
(82.2)1954 3848 y(P)n(ercen)n(tage)e(of)i(wrong)e(resp)r(onses)g(:)i
(80.0)1954 3947 y(Qualit)n(y)f(criterion)f(:)i(80.2)p
0 TeXcolorgray 1892 5919 a(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 142
-8 a
SDict begin H.S end
 142 -8 a 0 TeXcolorgray 0 TeXcolorgray 142 -8 a
SDict begin H.R end

142 -8 a 142 -8 a
SDict begin [ /View [/XYZ H.V] /Dest (page.4) cvn /DEST pdfmark end
 142 -8 a 0 TeXcolorgray 0 TeXcolorgray
150 390 a Fd(SUBJECT)45 b(2)e(NEW)150 482 y
SDict begin H.S end
 150 482 a
150 482 a
SDict begin 12 H.A end
 150 482 a 150 482 a
SDict begin [ /View [/XYZ H.V] /Dest (section*.4) cvn /DEST pdfmark
end
 150 482 a 275 593 a Fc(Spatial)27
b(\034lter)g(:)h(Mean)f(of)h(c)n(hannels)150 693 y(T)-7
b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(No)150 792 y(P)n(ercen)n(tage)
19 b(of)i(signals)f(correct)g(detected)h(as)f(wrong)g(:)150
892 y(20.0)150 992 y(P)n(ercen)n(tage)f(of)i(signals)f(wrong)g
(detected)h(as)f(correct)g(:)150 1091 y(20.0)150 1191
y(T)-7 b(able)27 b(of)h(results)f(:)p 150 1203 1279 4
v 148 1302 4 100 v 580 1302 V 635 1272 a Fb(^)-46 b Fa(e)28
b Fc(=)f(juste)p 1011 1302 V 103 w Fb(^)-45 b Fa(e)27
b Fc(=)g(faux)p 1426 1302 V 150 1305 1279 4 v 148 1405
4 100 v 200 1375 a Fa(e)g Fc(=)g(juste)p 580 1405 V 190
w(79\045)p 1011 1405 V 271 w(21\045)p 1426 1405 V 150
1408 1279 4 v 148 1508 4 100 v 208 1478 a Fa(e)g Fc(=)h(faux)p
580 1508 V 197 w(20\045)p 1011 1508 V 271 w(80\045)p
1426 1508 V 150 1511 1279 4 v 150 1577 a(Global)f(p)r(ercen)n(tage)f
(of)i(resp)r(onses)e(:)i(79.2)150 1676 y(P)n(ercen)n(tage)e(of)i
(correct)e(resp)r(onses)g(:)i(77.8)150 1776 y(P)n(ercen)n(tage)e(of)i
(wrong)e(resp)r(onses)g(:)i(83.3)150 1876 y(Qualit)n(y)f(criterion)f(:)
i(79.2)275 2086 y(Spatial)f(\034lter)g(:)h(CSP)150 2186
y(T)-7 b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(No)150
2286 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g(detected)h(as)f
(wrong)g(:)150 2385 y(20.0)150 2485 y(P)n(ercen)n(tage)f(of)i(signals)f
(wrong)g(detected)h(as)f(correct)g(:)150 2584 y(20.0)150
2684 y(T)-7 b(able)27 b(of)h(results)f(:)p 150 2696 V
148 2795 4 100 v 580 2795 V 635 2765 a Fb(^)-46 b Fa(e)28
b Fc(=)f(juste)p 1011 2795 V 103 w Fb(^)-45 b Fa(e)27
b Fc(=)g(faux)p 1426 2795 V 150 2799 1279 4 v 148 2898
4 100 v 200 2868 a Fa(e)g Fc(=)g(juste)p 580 2898 V 190
w(75\045)p 1011 2898 V 271 w(25\045)p 1426 2898 V 150
2902 1279 4 v 148 3001 4 100 v 208 2971 a Fa(e)g Fc(=)h(faux)p
580 3001 V 197 w(26\045)p 1011 3001 V 271 w(74\045)p
1426 3001 V 150 3005 1279 4 v 150 3070 a(Global)f(p)r(ercen)n(tage)f
(of)i(resp)r(onses)e(:)i(73.3)150 3170 y(P)n(ercen)n(tage)e(of)i
(correct)e(resp)r(onses)g(:)i(76.7)150 3269 y(P)n(ercen)n(tage)e(of)i
(wrong)e(resp)r(onses)g(:)i(63.3)150 3369 y(Qualit)n(y)f(criterion)f(:)
i(74.1)275 3579 y(Spatial)f(\034lter)g(:)h(Fisher)150
3679 y(T)-7 b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(No)150
3779 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g(detected)h(as)f
(wrong)g(:)150 3878 y(20.0)150 3978 y(P)n(ercen)n(tage)f(of)i(signals)f
(wrong)g(detected)h(as)f(correct)g(:)150 4078 y(20.0)150
4177 y(T)-7 b(able)27 b(of)h(results)f(:)p 150 4189 V
148 4288 4 100 v 580 4288 V 635 4259 a Fb(^)-46 b Fa(e)28
b Fc(=)f(juste)p 1011 4288 V 103 w Fb(^)-45 b Fa(e)27
b Fc(=)g(faux)p 1426 4288 V 150 4292 1279 4 v 148 4391
4 100 v 200 4362 a Fa(e)g Fc(=)g(juste)p 580 4391 V 190
w(75\045)p 1011 4391 V 271 w(25\045)p 1426 4391 V 150
4395 1279 4 v 148 4494 4 100 v 208 4464 a Fa(e)g Fc(=)h(faux)p
580 4494 V 197 w(21\045)p 1011 4494 V 271 w(79\045)p
1426 4494 V 150 4498 1279 4 v 150 4563 a(Global)f(p)r(ercen)n(tage)f
(of)i(resp)r(onses)e(:)i(73.3)150 4663 y(P)n(ercen)n(tage)e(of)i
(correct)e(resp)r(onses)g(:)i(76.7)150 4762 y(P)n(ercen)n(tage)e(of)i
(wrong)e(resp)r(onses)g(:)i(63.3)150 4862 y(Qualit)n(y)f(criterion)f(:)
i(75.9)275 5073 y(Spatial)f(\034lter)g(:)h(Mean)f(of)h(c)n(hannels)150
5172 y(T)-7 b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(Y)-7
b(es)150 5272 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g
(detected)h(as)f(wrong)g(:)150 5372 y(20.0)150 5471 y(P)n(ercen)n(tage)
f(of)i(signals)f(wrong)g(detected)h(as)f(correct)g(:)150
5571 y(20.0)150 5670 y(T)-7 b(able)27 b(of)h(results)f(:)p
0 TeXcolorgray 0 TeXcolorgray 1954 311 V 1952 410 4 100
v 2384 410 V 2439 380 a Fb(^)-46 b Fa(e)28 b Fc(=)f(juste)p
2815 410 V 103 w Fb(^)-45 b Fa(e)27 b Fc(=)g(faux)p 3230
410 V 1954 413 1279 4 v 1952 513 4 100 v 2004 483 a Fa(e)g
Fc(=)g(juste)p 2384 513 V 190 w(79\045)p 2815 513 V 271
w(21\045)p 3230 513 V 1954 516 1279 4 v 1952 616 4 100
v 2012 586 a Fa(e)g Fc(=)h(faux)p 2384 616 V 197 w(17\045)p
2815 616 V 271 w(83\045)p 3230 616 V 1954 619 1279 4
v 1954 685 a(Global)f(p)r(ercen)n(tage)f(of)i(resp)r(onses)e(:)i(79.2)
1954 784 y(P)n(ercen)n(tage)e(of)i(correct)e(resp)r(onses)g(:)i(80.0)
1954 884 y(P)n(ercen)n(tage)e(of)i(wrong)e(resp)r(onses)g(:)i(76.7)1954
984 y(Qualit)n(y)f(criterion)f(:)i(80.3)2079 1192 y(Spatial)f(\034lter)
g(:)h(CSP)1954 1292 y(T)-7 b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(Y)-7
b(es)1954 1391 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g
(detected)h(as)f(wrong)g(:)1954 1491 y(20.0)1954 1591
y(P)n(ercen)n(tage)f(of)i(signals)f(wrong)g(detected)h(as)f(correct)g
(:)1954 1690 y(20.0)1954 1790 y(T)-7 b(able)27 b(of)h(results)f(:)p
1954 1801 V 1952 1901 4 100 v 2384 1901 V 2439 1871 a
Fb(^)-46 b Fa(e)28 b Fc(=)f(juste)p 2815 1901 V 103 w
Fb(^)-45 b Fa(e)27 b Fc(=)g(faux)p 3230 1901 V 1954 1904
1279 4 v 1952 2004 4 100 v 2004 1974 a Fa(e)g Fc(=)g(juste)p
2384 2004 V 190 w(72\045)p 2815 2004 V 271 w(28\045)p
3230 2004 V 1954 2007 1279 4 v 1952 2107 4 100 v 2012
2077 a Fa(e)g Fc(=)h(faux)p 2384 2107 V 197 w(25\045)p
2815 2107 V 271 w(75\045)p 3230 2107 V 1954 2110 1279
4 v 1954 2176 a(Global)f(p)r(ercen)n(tage)f(of)i(resp)r(onses)e(:)i
(67.5)1954 2275 y(P)n(ercen)n(tage)e(of)i(correct)e(resp)r(onses)g(:)i
(67.8)1954 2375 y(P)n(ercen)n(tage)e(of)i(wrong)e(resp)r(onses)g(:)i
(66.7)1954 2475 y(Qualit)n(y)f(criterion)f(:)i(71.5)2079
2683 y(Spatial)f(\034lter)g(:)h(Fisher)1954 2783 y(T)-7
b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(Y)-7 b(es)1954
2882 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g(detected)h(as)f
(wrong)g(:)1954 2982 y(20.0)1954 3082 y(P)n(ercen)n(tage)f(of)i
(signals)f(wrong)g(detected)h(as)f(correct)g(:)1954 3181
y(20.0)1954 3281 y(T)-7 b(able)27 b(of)h(results)f(:)p
1954 3292 V 1952 3392 4 100 v 2384 3392 V 2439 3362 a
Fb(^)-46 b Fa(e)28 b Fc(=)f(juste)p 2815 3392 V 103 w
Fb(^)-45 b Fa(e)27 b Fc(=)g(faux)p 3230 3392 V 1954 3395
1279 4 v 1952 3495 4 100 v 2004 3465 a Fa(e)g Fc(=)g(juste)p
2384 3495 V 190 w(79\045)p 2815 3495 V 271 w(21\045)p
3230 3495 V 1954 3498 1279 4 v 1952 3598 4 100 v 2012
3568 a Fa(e)g Fc(=)h(faux)p 2384 3598 V 197 w(28\045)p
2815 3598 V 271 w(72\045)p 3230 3598 V 1954 3601 1279
4 v 1954 3667 a(Global)f(p)r(ercen)n(tage)f(of)i(resp)r(onses)e(:)i
(75.8)1954 3766 y(P)n(ercen)n(tage)e(of)i(correct)e(resp)r(onses)g(:)i
(81.1)1954 3866 y(P)n(ercen)n(tage)e(of)i(wrong)e(resp)r(onses)g(:)i
(60.0)1954 3966 y(Qualit)n(y)f(criterion)f(:)i(75.8)1954
4388 y Fd(SUBJECT)45 b(3)1954 4478 y
SDict begin H.S end
 1954 4478 a 1954
4478 a
SDict begin 12 H.A end
 1954 4478 a 1954 4478 a
SDict begin [ /View [/XYZ H.V] /Dest (section*.5) cvn /DEST pdfmark
end
 1954 4478 a 2079 4587
a Fc(Spatial)27 b(\034lter)g(:)h(Mean)f(of)h(c)n(hannels)1954
4687 y(T)-7 b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(No)1954
4786 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g(detected)h(as)f
(wrong)g(:)1954 4886 y(20.0)1954 4986 y(P)n(ercen)n(tage)f(of)i
(signals)f(wrong)g(detected)h(as)f(correct)g(:)1954 5085
y(20.0)1954 5185 y(T)-7 b(able)27 b(of)h(results)f(:)p
1954 5196 1279 4 v 1952 5296 4 100 v 2384 5296 V 2439
5266 a Fb(^)-46 b Fa(e)28 b Fc(=)f(juste)p 2815 5296
V 103 w Fb(^)-45 b Fa(e)27 b Fc(=)g(faux)p 3230 5296
V 1954 5299 1279 4 v 1952 5399 4 100 v 2004 5369 a Fa(e)g
Fc(=)g(juste)p 2384 5399 V 190 w(54\045)p 2815 5399 V
271 w(46\045)p 3230 5399 V 1954 5402 1279 4 v 1952 5502
4 100 v 2012 5472 a Fa(e)g Fc(=)h(faux)p 2384 5502 V
197 w(20\045)p 2815 5502 V 271 w(80\045)p 3230 5502 V
1954 5505 1279 4 v 1954 5571 a(Global)f(p)r(ercen)n(tage)f(of)i(resp)r
(onses)e(:)i(47.5)1954 5670 y(P)n(ercen)n(tage)e(of)i(correct)e(resp)r
(onses)g(:)i(41.1)p 0 TeXcolorgray 1892 5919 a(4)p 0
TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 142
-8 a
SDict begin H.S end
 142 -8 a 0 TeXcolorgray 0 TeXcolorgray 142 -8 a
SDict begin H.R end

142 -8 a 142 -8 a
SDict begin [ /View [/XYZ H.V] /Dest (page.5) cvn /DEST pdfmark end
 142 -8 a 0 TeXcolorgray 0 TeXcolorgray
150 390 a Fc(P)n(ercen)n(tage)26 b(of)i(wrong)e(resp)r(onses)g(:)i
(66.7)150 490 y(Qualit)n(y)f(criterion)f(:)i(60.5)275
699 y(Spatial)f(\034lter)g(:)h(CSP)150 798 y(T)-7 b(emp)r(oral)27
b(readjustmen)n(t)g(:)h(No)150 898 y(P)n(ercen)n(tage)19
b(of)i(signals)f(correct)g(detected)h(as)f(wrong)g(:)150
997 y(20.0)150 1097 y(P)n(ercen)n(tage)f(of)i(signals)f(wrong)g
(detected)h(as)f(correct)g(:)150 1197 y(20.0)150 1296
y(T)-7 b(able)27 b(of)h(results)f(:)p 150 1308 1279 4
v 148 1408 4 100 v 580 1408 V 635 1378 a Fb(^)-46 b Fa(e)28
b Fc(=)f(juste)p 1011 1408 V 103 w Fb(^)-45 b Fa(e)27
b Fc(=)g(faux)p 1426 1408 V 150 1411 1279 4 v 148 1510
4 100 v 200 1481 a Fa(e)g Fc(=)g(juste)p 580 1510 V 190
w(70\045)p 1011 1510 V 271 w(30\045)p 1426 1510 V 150
1514 1279 4 v 148 1613 4 100 v 208 1584 a Fa(e)g Fc(=)h(faux)p
580 1613 V 197 w(28\045)p 1011 1613 V 271 w(72\045)p
1426 1613 V 150 1617 1279 4 v 150 1682 a(Global)f(p)r(ercen)n(tage)f
(of)i(resp)r(onses)e(:)i(62.5)150 1782 y(P)n(ercen)n(tage)e(of)i
(correct)e(resp)r(onses)g(:)i(63.3)150 1881 y(P)n(ercen)n(tage)e(of)i
(wrong)e(resp)r(onses)g(:)i(60.0)150 1981 y(Qualit)n(y)f(criterion)f(:)
i(68.3)275 2190 y(Spatial)f(\034lter)g(:)h(Fisher)150
2289 y(T)-7 b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(No)150
2389 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g(detected)h(as)f
(wrong)g(:)150 2489 y(20.0)150 2588 y(P)n(ercen)n(tage)f(of)i(signals)f
(wrong)g(detected)h(as)f(correct)g(:)150 2688 y(20.0)150
2788 y(T)-7 b(able)27 b(of)h(results)f(:)p 150 2799 V
148 2899 4 100 v 580 2899 V 635 2869 a Fb(^)-46 b Fa(e)28
b Fc(=)f(juste)p 1011 2899 V 103 w Fb(^)-45 b Fa(e)27
b Fc(=)g(faux)p 1426 2899 V 150 2902 1279 4 v 148 3002
4 100 v 200 2972 a Fa(e)g Fc(=)g(juste)p 580 3002 V 190
w(76\045)p 1011 3002 V 271 w(24\045)p 1426 3002 V 150
3005 1279 4 v 148 3105 4 100 v 208 3075 a Fa(e)g Fc(=)h(faux)p
580 3105 V 197 w(28\045)p 1011 3105 V 271 w(72\045)p
1426 3105 V 150 3108 1279 4 v 150 3173 a(Global)f(p)r(ercen)n(tage)f
(of)i(resp)r(onses)e(:)i(70.8)150 3273 y(P)n(ercen)n(tage)e(of)i
(correct)e(resp)r(onses)g(:)i(74.4)150 3373 y(P)n(ercen)n(tage)e(of)i
(wrong)e(resp)r(onses)g(:)i(60.0)150 3472 y(Qualit)n(y)f(criterion)f(:)
i(73.1)275 3681 y(Spatial)f(\034lter)g(:)h(Mean)f(of)h(c)n(hannels)150
3781 y(T)-7 b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(Y)-7
b(es)150 3880 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g
(detected)h(as)f(wrong)g(:)150 3980 y(20.0)150 4080 y(P)n(ercen)n(tage)
f(of)i(signals)f(wrong)g(detected)h(as)f(correct)g(:)150
4179 y(20.0)150 4279 y(T)-7 b(able)27 b(of)h(results)f(:)p
150 4290 V 148 4390 4 100 v 580 4390 V 635 4360 a Fb(^)-46
b Fa(e)28 b Fc(=)f(juste)p 1011 4390 V 103 w Fb(^)-45
b Fa(e)27 b Fc(=)g(faux)p 1426 4390 V 150 4393 1279 4
v 148 4493 4 100 v 200 4463 a Fa(e)g Fc(=)g(juste)p 580
4493 V 190 w(59\045)p 1011 4493 V 271 w(41\045)p 1426
4493 V 150 4496 1279 4 v 148 4596 4 100 v 208 4566 a
Fa(e)g Fc(=)h(faux)p 580 4596 V 197 w(24\045)p 1011 4596
V 271 w(76\045)p 1426 4596 V 150 4599 1279 4 v 150 4665
a(Global)f(p)r(ercen)n(tage)f(of)i(resp)r(onses)e(:)i(50.0)150
4764 y(P)n(ercen)n(tage)e(of)i(correct)e(resp)r(onses)g(:)i(43.3)150
4864 y(P)n(ercen)n(tage)e(of)i(wrong)e(resp)r(onses)g(:)i(70.0)150
4964 y(Qualit)n(y)f(criterion)f(:)i(61.7)275 5172 y(Spatial)f(\034lter)
g(:)h(CSP)150 5272 y(T)-7 b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(Y)-7
b(es)150 5372 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g
(detected)h(as)f(wrong)g(:)150 5471 y(20.0)150 5571 y(P)n(ercen)n(tage)
f(of)i(signals)f(wrong)g(detected)h(as)f(correct)g(:)150
5670 y(20.0)p 0 TeXcolorgray 0 TeXcolorgray 1954 390
a(T)-7 b(able)27 b(of)h(results)f(:)p 1954 402 V 1952
501 4 100 v 2384 501 V 2439 472 a Fb(^)-46 b Fa(e)28
b Fc(=)f(juste)p 2815 501 V 103 w Fb(^)-45 b Fa(e)27
b Fc(=)g(faux)p 3230 501 V 1954 505 1279 4 v 1952 604
4 100 v 2004 575 a Fa(e)g Fc(=)g(juste)p 2384 604 V 190
w(70\045)p 2815 604 V 271 w(30\045)p 3230 604 V 1954
608 1279 4 v 1952 707 4 100 v 2012 677 a Fa(e)g Fc(=)h(faux)p
2384 707 V 197 w(26\045)p 2815 707 V 271 w(74\045)p 3230
707 V 1954 711 1279 4 v 1954 776 a(Global)f(p)r(ercen)n(tage)f(of)i
(resp)r(onses)e(:)i(60.0)1954 876 y(P)n(ercen)n(tage)e(of)i(correct)e
(resp)r(onses)g(:)i(58.9)1954 975 y(P)n(ercen)n(tage)e(of)i(wrong)e
(resp)r(onses)g(:)i(63.3)1954 1075 y(Qualit)n(y)f(criterion)f(:)i(67.8)
2079 1274 y(Spatial)f(\034lter)g(:)h(Fisher)1954 1374
y(T)-7 b(emp)r(oral)27 b(readjustmen)n(t)g(:)h(Y)-7 b(es)1954
1474 y(P)n(ercen)n(tage)19 b(of)i(signals)f(correct)g(detected)h(as)f
(wrong)g(:)1954 1573 y(20.0)1954 1673 y(P)n(ercen)n(tage)f(of)i
(signals)f(wrong)g(detected)h(as)f(correct)g(:)1954 1772
y(20.0)1954 1872 y(T)-7 b(able)27 b(of)h(results)f(:)p
1954 1884 V 1952 1983 4 100 v 2384 1983 V 2439 1953 a
Fb(^)-46 b Fa(e)28 b Fc(=)f(juste)p 2815 1983 V 103 w
Fb(^)-45 b Fa(e)27 b Fc(=)g(faux)p 3230 1983 V 1954 1987
1279 4 v 1952 2086 4 100 v 2004 2056 a Fa(e)g Fc(=)g(juste)p
2384 2086 V 190 w(75\045)p 2815 2086 V 271 w(25\045)p
3230 2086 V 1954 2090 1279 4 v 1952 2189 4 100 v 2012
2159 a Fa(e)g Fc(=)h(faux)p 2384 2189 V 197 w(28\045)p
2815 2189 V 271 w(72\045)p 3230 2189 V 1954 2193 1279
4 v 1954 2258 a(Global)f(p)r(ercen)n(tage)f(of)i(resp)r(onses)e(:)i
(71.7)1954 2358 y(P)n(ercen)n(tage)e(of)i(correct)e(resp)r(onses)g(:)i
(75.6)1954 2457 y(P)n(ercen)n(tage)e(of)i(wrong)e(resp)r(onses)g(:)i
(60.0)1954 2557 y(Qualit)n(y)f(criterion)f(:)i(73.0)p
0 TeXcolorgray 1892 5919 a(5)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
